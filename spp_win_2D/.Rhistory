theta.save[k] <- rgamma(0.01 + n, 0.01 + lam.int)
}
beta.save <- out.cond.full$beta.save
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
lam.int <- sum(exp(log(ds)+X.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, 0.01 + lam.int)
}
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
mean(beta.0.save[-(1:1000)])
plot(beta.0.save.full.lik,type="l")
beta.save.full.lik <- out.comp.full$beta.save[,-(1:n.burn)]
beta.0.save.full.lik <- out.comp.full$beta.0.save[-(1:n.burn)]
plot(beta.0.save.full.lik,type="l")
mean(beta.0.save[-(1:1000),])
mean(beta.0.save[-(1:1000)])
mean(beta.0.save.full.lik[-(1:1000)])
out.cond.pg <- list(beta.save = beta.save.pg$beta[-1,],
# beta.0.save = log(rgamma(n.mcmc, n + 0.001, 1.001)),
n.mcmc = n.mcmc, n = n, ds = ds, X.full = X.win.full)
beta.save <- out.cond.pg$beta.save
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, 0.01 + lam.int)
};cat("\n")
dim(out.cond.pg$beta.save)
View(out.pg)
View(out.cond.pg)
load("~/Desktop/GlacierBay_Project/GlacierBay_Code/spp_win_2D/SPP_script.RData")
library(tidyverse)
library(raster)
library(spatstat)
# --- Simulate 2D data ---------------------------------------------------------
set.seed(1234)
# set domain
x.domain <- c(0,0.9)
y.domain <- c(0,0.9)
# define the coordinates for window squares
win.length <- 0.1
gap <- 0.1
domain.length <- x.domain[2] - x.domain[1]
coords <- expand.grid(x = seq(gap, domain.length - win.length - gap, by = win.length + gap),
y = seq(gap, domain.length - win.length - gap, by = win.length + gap))
# create individual squares
squares <- lapply(1:nrow(coords), function(i) {
x0 <- coords$x[i]
y0 <- coords$y[i]
owin(xrange = c(x0, x0 + win.length), yrange = c(y0, y0 + win.length))
})
# combine squares into single window
combined.window <- do.call(union.owin, squares)
# calculate areas
tot.area <- (x.domain[2] - x.domain[1])*(y.domain[2] - y.domain[1])
tot.win.area <- area.owin(combined.window)
n.win <- 16
win.area <- tot.win.area/n.win
tot.nonwin.area <- tot.area - tot.win.area
# plot the window
domain <- owin(xrange = c(0,domain.length), yrange = c(0,domain.length))
# get quadrature grid
x.m <- 100
y.m <- 100
m <- x.m*y.m
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
y.full <- x.full
s.full <- expand.grid(x = x.full, y = y.full)
ds <- (x.full[2] - x.full[1])^2
# set X matrix
X.full <- matrix(0,m,2)
x1 <- s.full[,1]
x2 <- s.full[,2]
X.full[,1] <- x1
X.full[,2] <- x2
# set beta
beta <- c(2,1)
beta.0 <- 4
lam.full <- exp(beta.0+X.full%*%beta)
lam.max <- max(lam.full)
M=rpois(1, lam.max)
x.superpop <- runif(M, x.domain[1], x.domain[2])
y.superpop <- runif(M, y.domain[1], y.domain[2])
s.superpop <- cbind(x.superpop, y.superpop)
X.superpop <- cbind(x.superpop, y.superpop)
lam.superpop=exp(beta.0+X.superpop%*%beta)
obs.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.obs=s.superpop[obs.idx,] # total observed points
X.obs=X.superpop[obs.idx,]
lam.obs <- lam.superpop[obs.idx]
N=nrow(s.obs) # 218
# plot superpop lambda
superpop.df <- as.data.frame(cbind(x.superpop, y.superpop, lam.superpop))
obs.win <- inside.owin(s.obs[,1], s.obs[,2], combined.window)
obs.win.idx <- (1:N)[obs.win]
n=length(obs.win.idx) # 44
full.win <- inside.owin(s.full[,1], s.full[,2], combined.window)
full.win.idx <- (1:m)[full.win]
s.win=s.obs[obs.win.idx,]
X.win=X.obs[obs.win.idx,]
X.win.full=X.full[full.win.idx,]
X.nowin.full=X.full[-full.win.idx,]
# plot windowed data
obs.df <- as.data.frame(s.obs)
n.mcmc=100000
source("spp.comp.mcmc.R")
tic()
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
toc() # 6.568 sec
source(here("GlacierBay_Code", "Polya_Gamma.R"))
X.pg <- cbind(rep(1, nrow(X.bern)), X.bern)
n.bg <- 10000
bg.pts <- rpoint(n.bg, win = combined.window)
X.bg <- cbind(bg.pts$x, bg.pts$y)
X.bern <- rbind(X.win, X.bg)
y.bern <- rep(0, n + n.bg)
y.bern[1:n] <- 1
bern.rsf.df <- data.frame(y = y.bern, x1 = X.bern[,1], x2 = X.bern[,2])
out.bern.cond <- stan_glm(y ~ x1 + x2, family=binomial(link="logit"), data=bern.rsf.df,
iter = 100000, chains = 1)
X.bg <- cbind(bg.pts$x, bg.pts$y)
X.bern <- rbind(X.win, X.bg)
y.bern <- rep(0, n + n.bg)
y.bern[1:n] <- 1
bern.rsf.df <- data.frame(y = y.bern, x1 = X.bern[,1], x2 = X.bern[,2])
source(here("GlacierBay_Code", "Polya_Gamma.R"))
X.pg <- cbind(rep(1, nrow(X.bern)), X.bern)
p <- ncol(X.pg)
mu.beta <- rep(0, p)
sigma.beta <- diag(2.25, p)
tic()
beta.save.pg <- polya_gamma(y.bern, X.pg, mu.beta, sigma.beta, 100000)
toc() # 236 sec
beta.save <- beta.save.pg$beta[2:3,]
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, 0.01 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
hist(beta.0.save)
hist(out.comp.full$beta.0.save)
beta.save <- beta.save.pg$beta[2:3,]
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 1 + n, 0.01 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
View(beta.save)
dim(out.comp.full$beta.save)
beta.save <- out.comp.full$beta.save
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, 0.01 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
?rgamma
alpha <- seq(0.0001, 1, length.out = 100)
plot(x = alpha, y = trigamma(alpha), type = "l")
alpha <- seq(0.0001, 0.1, length.out = 100)
plot(x = alpha, y = trigamma(alpha), type = "l")
trigamma(0.01)
beta.save <- rbind(rep(2, n.mcmc), rep(1, n.mcmc))
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, rate = 0.01 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
?expand.grid
alpha <- seq(0.001, 1, length.out = 100)
beta <- seq(0.001, 1, length.out = 100)
alpha.beta.grid <- expand.grid(alpha, beta)
View(alpha.beta.grid)
log(0.01) - 2*log(0.01)
log(1) - 2*log(0.01)
log(1) - 2*log(0.001)
log(10) - 2*log(0.001)
0.01/(0.01^2)
0.01/(0.01)^2
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 1 + n, rate = 0.001 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
beta.save <- beta.save.pg$beta[2:3,]
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, rate = 0.01 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
beta.save <- beta.save.pg$beta[2:3,]
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 1 + n, rate = 0.001 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
ds
beta.save <- out.cond.pg$beta.save
beta.save <- out.cond.pg$beta.save
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.win.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, 0.01 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
load("~/Desktop/GlacierBay_Project/GlacierBay_Code/SPP_script.RData")
beta.save <- out.cond.pg$beta.save
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.win.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, 0.01 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
n.mcmc <- 100000
beta.save <- out.cond.pg$beta.save
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.win.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, 0.01 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
effectiveSize(beta.0.save)
effectiveSize(out.comp.full$beta.0.save)
hist(beta.0.save)
hist(out.comp.full$beta.0.save)
hist(beta.0.save[-(1:1000)])
hist(out.comp.full$beta.0.save[-(1:1000)])
hist(out.comp.full$beta.0.save,prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save,n=1000),col="red",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000),col="red",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000),col="green",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=100),col="green",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000),col="green",lwd=2)
layout(matrix(1:3,1,3))
hist(out.comp.full$beta.0.save,prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(out.cond.full$beta.0.save,n=1000),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save,n=1000),col="green",lwd=2)
hist(out.comp.full$beta.save[1,],prob=TRUE,breaks=60,main="",xlab=bquote(beta[1]),
ylim = c(0,1))
lines(density(out.cond.full$beta.save[1,],n=1000),col="red",lwd=2)
lines(density(out.cond.2.full$beta.save[1,],n=1000),col="green",lwd=2)
hist(out.comp.full$beta.save[2,],prob=TRUE,breaks=60,main="",xlab=bquote(beta[2]),
ylim = c(0,1))
lines(density(out.cond.full$beta.save[2,],n=1000),col="red",lwd=2)
lines(density(out.cond.2.full$beta.save[2,],n=1000),col="green",lwd=2)
?density
# compare marginal posterior
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, bw = 2),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000, bw = 2),
col="green",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, bw = 1.1),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000, bw = 1.1),
col="green",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, bw = 1.01),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000, bw = 1.01),
col="green",lwd=2)
# compare marginal posterior
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, bw = 1),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000, bw = 1),
col="green",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 1.5),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000, adjust = 1.5),
col="green",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 1.5),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000, adjust = 2),
col="green",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 3),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000, adjust = 3),
col="green",lwd=2)
library(tidyverse)
library(raster)
library(spatstat)
# --- Simulate 2D data ---------------------------------------------------------
set.seed(1234)
# set domain
x.domain <- c(0,0.9)
y.domain <- c(0,0.9)
# define the coordinates for window squares
win.length <- 0.1
gap <- 0.1
domain.length <- x.domain[2] - x.domain[1]
coords <- expand.grid(x = seq(gap, domain.length - win.length - gap, by = win.length + gap),
y = seq(gap, domain.length - win.length - gap, by = win.length + gap))
# create individual squares
squares <- lapply(1:nrow(coords), function(i) {
x0 <- coords$x[i]
y0 <- coords$y[i]
owin(xrange = c(x0, x0 + win.length), yrange = c(y0, y0 + win.length))
})
# combine squares into single window
combined.window <- do.call(union.owin, squares)
# calculate areas
tot.area <- (x.domain[2] - x.domain[1])*(y.domain[2] - y.domain[1])
tot.win.area <- area.owin(combined.window)
n.win <- 16
win.area <- tot.win.area/n.win
tot.nonwin.area <- tot.area - tot.win.area
# plot the window
domain <- owin(xrange = c(0,domain.length), yrange = c(0,domain.length))
# get quadrature grid
x.m <- 100
y.m <- 100
m <- x.m*y.m
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
y.full <- x.full
s.full <- expand.grid(x = x.full, y = y.full)
plot(domain)
plot(combined.window, add = TRUE)
points(s.full, pch = 19, cex = 0.05)
ds <- (x.full[2] - x.full[1])^2
# set X matrix
X.full <- matrix(0,m,2)
x1 <- s.full[,1]
x2 <- s.full[,2]
X.full[,1] <- x1
X.full[,2] <- x2
# set beta
beta <- c(2,1)
beta.0 <- 4
lam.full <- exp(beta.0+X.full%*%beta)
lam.max <- max(lam.full)
full.df <- as.data.frame(cbind(s.full, x1, x2, lam.full))
M=rpois(1, lam.max)
x.superpop <- runif(M, x.domain[1], x.domain[2])
y.superpop <- runif(M, y.domain[1], y.domain[2])
s.superpop <- cbind(x.superpop, y.superpop)
X.superpop <- cbind(x.superpop, y.superpop)
lam.superpop=exp(beta.0+X.superpop%*%beta)
obs.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.obs=s.superpop[obs.idx,] # total observed points
X.obs=X.superpop[obs.idx,]
lam.obs <- lam.superpop[obs.idx]
N=nrow(s.obs) # 218
# plot superpop lambda
superpop.df <- as.data.frame(cbind(x.superpop, y.superpop, lam.superpop))
obs.win <- inside.owin(s.obs[,1], s.obs[,2], combined.window)
obs.win.idx <- (1:N)[obs.win]
n=length(obs.win.idx) # 44
full.win <- inside.owin(s.full[,1], s.full[,2], combined.window)
full.win.idx <- (1:m)[full.win]
s.win=s.obs[obs.win.idx,]
X.win=X.obs[obs.win.idx,]
X.win.full=X.full[full.win.idx,]
X.nowin.full=X.full[-full.win.idx,]
# plot windowed data
obs.df <- as.data.frame(s.obs)
n.mcmc=100000
source("spp.comp.mcmc.R")
tic()
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
toc() # 6.568 sec
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
out.cond.full
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
View(spp.cond.mcmc)
source(here("GlacierBay_Code", "Polya_Gamma.R"))
X.pg <- cbind(rep(1, nrow(X.bern)), X.bern)
source(here("GlacierBay_Code", "Polya_Gamma.R"))
X.pg <- cbind(rep(1, nrow(X.bern)), X.bern)
p <- ncol(X.pg)
mu.beta <- rep(0, p)
sigma.beta <- diag(2.25, p)
beta.save.pg <- polya_gamma(y.bern, X.pg, mu.beta, sigma.beta, 100000)
library(tidyverse)
library(raster)
library(spatstat)
# --- Simulate 2D data ---------------------------------------------------------
set.seed(1234)
# set domain
x.domain <- c(0,0.9)
y.domain <- c(0,0.9)
# define the coordinates for window squares
win.length <- 0.1
gap <- 0.1
domain.length <- x.domain[2] - x.domain[1]
coords <- expand.grid(x = seq(gap, domain.length - win.length - gap, by = win.length + gap),
y = seq(gap, domain.length - win.length - gap, by = win.length + gap))
# create individual squares
squares <- lapply(1:nrow(coords), function(i) {
x0 <- coords$x[i]
y0 <- coords$y[i]
owin(xrange = c(x0, x0 + win.length), yrange = c(y0, y0 + win.length))
})
# combine squares into single window
combined.window <- do.call(union.owin, squares)
# calculate areas
tot.area <- (x.domain[2] - x.domain[1])*(y.domain[2] - y.domain[1])
tot.win.area <- area.owin(combined.window)
n.win <- 16
win.area <- tot.win.area/n.win
tot.nonwin.area <- tot.area - tot.win.area
# plot the window
domain <- owin(xrange = c(0,domain.length), yrange = c(0,domain.length))
# get quadrature grid
x.m <- 100
y.m <- 100
m <- x.m*y.m
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
y.full <- x.full
s.full <- expand.grid(x = x.full, y = y.full)
ds <- (x.full[2] - x.full[1])^2
# set X matrix
X.full <- matrix(0,m,2)
x1 <- s.full[,1]
x2 <- s.full[,2]
X.full[,1] <- x1
X.full[,2] <- x2
# set beta
beta <- c(2,1)
beta.0 <- 4
lam.full <- exp(beta.0+X.full%*%beta)
lam.max <- max(lam.full)
full.df <- as.data.frame(cbind(s.full, x1, x2, lam.full))
# create full raster
full.df <- full.df %>% rename(z = lam.full)
# simulate observed points
M=rpois(1, lam.max)
x.superpop <- runif(M, x.domain[1], x.domain[2])
y.superpop <- runif(M, y.domain[1], y.domain[2])
s.superpop <- cbind(x.superpop, y.superpop)
X.superpop <- cbind(x.superpop, y.superpop)
lam.superpop=exp(beta.0+X.superpop%*%beta)
obs.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.obs=s.superpop[obs.idx,] # total observed points
X.obs=X.superpop[obs.idx,]
lam.obs <- lam.superpop[obs.idx]
N=nrow(s.obs) # 218
# plot superpop lambda
superpop.df <- as.data.frame(cbind(x.superpop, y.superpop, lam.superpop))
obs.win <- inside.owin(s.obs[,1], s.obs[,2], combined.window)
obs.win.idx <- (1:N)[obs.win]
n=length(obs.win.idx) # 44
full.win <- inside.owin(s.full[,1], s.full[,2], combined.window)
full.win.idx <- (1:m)[full.win]
s.win=s.obs[obs.win.idx,]
X.win=X.obs[obs.win.idx,]
X.win.full=X.full[full.win.idx,]
X.nowin.full=X.full[-full.win.idx,]
# plot windowed data
obs.df <- as.data.frame(s.obs)
n.mcmc=100000
source("spp.comp.mcmc.R")
tic()
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
toc() # 6.568 sec
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
out.cond.full <- spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
out.cond.full
p <- ncol(X.pg)
beta.save <- beta.save.pg$beta[2:3,]
