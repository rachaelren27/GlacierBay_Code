apply(beta.samp,2,quantile,c(0.025,.975))
save.image("~/Desktop/GlacierBay_Project/SPP_lab/SPP_lab_numquad.RData")
library(sf)
library(here)
library(tidyverse)
library(stringi)
library(tidyverse)
path <- here("NPS_data", "HARBORSEAL_2007", "seal_locations_final",
"all_seal_locs")
all.seal.locs.20070618 <- st_read(dsn = path, layer = "JHI_20070618_allseal_locs")
path <- here("NPS_data", "HARBORSEAL_2007", "footprints")
footprint.20070618 <- st_read(dsn = path, layer = "JHI_20070618_footprint")
ggplot(footprint.20070618) +
geom_sf()
path <- here("NPS_data", "HARBORSEAL_2007", "survey_polygons")
survey.poly.20070618 <- st_read(dsn = path, layer = "JHI_20070618_surveyboundary")
# --- Define Poisson Point Process ---------------------------------------------
survey.poly.latlong <- st_transform(survey.poly.20070618$geometry,
CRS("+proj=longlat +datum=WGS84"))
survey.poly.mat <- survey.poly.latlong[[1]][[1]]
survey.win <- owin(poly = data.frame(x=rev(survey.poly.mat[,1]),
y=rev(survey.poly.mat[,2])))
seal.locs.20070618 <- st_transform(all.seal.locs.20070618$geometry,
CRS("+proj=longlat +datum=WGS84"))
crs(survey.poly.mat)
crs(survey.poly.latlong)
# --- Define Poisson Point Process ---------------------------------------------
survey.poly <- st_transform(survey.poly.20070618$geometry,
CRS("+proj=longlat +datum=WGS84"))
survey.poly.mat <- survey.poly[[1]][[1]]
survey.win <- owin(poly = data.frame(x=rev(survey.poly.mat[,1]),
y=rev(survey.poly.mat[,2])))
seal.locs <- st_transform(all.seal.locs.20070618$geometry,
CRS("+proj=longlat +datum=WGS84"))
seal.cord <- st_coordinates(seal.locs)
seal.X <- seal.latlong.20070618[,1]
View(seal.cord)
seal.coord <- st_coordinates(seal.locs)
seal.X <- seal.coord[,1]
seal.Y <- seal.coord[,2]
all.seal.20070618 <- ppp(x = seal.20070618.X, y = seal.20070618.Y,
owin = survey.win) # warning
all.seal.20070618 <- ppp(x = seal.X, y = seal.Y,
owin = survey.win) # warning
ggplot() +
geom_sf(data = survey.poly) +
geom_sf(data = seal.coord)
ggplot() +
geom_sf(data = survey.poly) +
geom_sf(data = seal.coord)
library(sf)
library(here)
library(tidyverse)
library(stringi)
library(tidyverse)
ggplot() +
geom_sf(data = survey.poly) +
geom_sf(data = seal.coord)
ggplot() +
geom_sf(data = survey.poly) +
geom_sf(data = seal.locs)
plot(bath.rast)
bath.rast <- raster(here("covariates", "bathymetry.tiff"))
# convert footprint crs
footprint.20070618 <- st_transform(footprint.20070618,
CRS("+proj=longlat +datum=WGS84"))
plot(bath.rast)
plot(st_geometry(survey.poly), add = TRUE, reset = FALSE)
plot(st_geometry(footprint.20070618), add = TRUE, reset = FALSE)
grid.tf <- inside.owin(x = seal.X, y = seal.Y, owin = survey.win)
grid.tf <- inside.owin(x = seal.X, y = seal.Y, survey.win)
sum(grid.tf)
View(footprint.20070618)
crs(footprint.20070618)
CRS(footprint.20070618)
footprint.win <- owin(poly = data.frame(x=rev(footprint.20070618$Latitude),
y=rev(footprint.20070618$Longitude)))
footprint.win <- owin(poly = data.frame(x=footprint.20070618$Latitude),
y=footprint.20070618$Longitude))
footprint.win <- owin(poly = data.frame(x=footprint.20070618$Latitude,
y=footprint.20070618$Longitude))
grid.tf <- inside.owin(x = seal.X, y = seal.Y, footprint.win)
sum(grid.tf)
View(survey.poly.20070618)
survey.poly <- st_transform(footprint.20070618$geometry,
CRS("+proj=longlat +datum=WGS84"))
footprint <- st_transform(footprint.20070618$geometry,
CRS("+proj=longlat +datum=WGS84"))
View(footprint)
View(footprint)
?owin
class(footpirnt)
class(footprint)
footprint.win <- owin(poly = fooptrint)
footprint.win <- owin(poly = fooptprint)
footprint.win <- owin(poly = footprint)
footprint.win <- owin(footprint)
footprint.win <- owin(mask = footprint)
as.mask(footprint)
View(footprint)
as.mask(footprint[[1]])
footprint[[1]]
crs(footprint)
View(footprint[[1]])
View(footprint[[1]][[1]])
ggplot() + geom_sf(data = footprint[[1]])
length(footprint)
footprint.coord <- matrix(nrow = 1, ncol = 2)
for(i in 1:length(footprint)){
footprint.coord <- rbind(footprint.coord, footprint[[i]][[1]])
}
View(footprint.coord)
footprint.coord <- matrix(data = footprint[[1]][[1]], nrow = 1, ncol = 2)
for(2 in 1:length(footprint)){
footprint.coord <- matrix(data = footprint[[1]][[1]], nrow = 1, ncol = 2)
for(i in 2:length(footprint)){
footprint.coord <- rbind(footprint.coord, footprint[[i]][[1]])
}
View(footprint.coord)
footprint[[1]][[1]]
footprint.coord <- matrix(data = footprint[[1]][[1]], nrow = 5, ncol = 2)
for(i in 2:length(footprint)){
footprint.coord <- rbind(footprint.coord, footprint[[i]][[1]])
}
View(footprint.coord)
footprint.win <- owin(poly = data.frame(x=rev(footprint.coord[,1]),
y=rev(footprint.coord[,2])))
grid.tf <- inside.owin(x = seal.X, y = seal.Y, footprint.win)
sum(grid.tf)
which(grid.tf == FALSE)
grid.tf <- inside.owin(x = seal.X, y = seal.Y, survey.win) # all true!
grid.tf <- inside.owin(x = seal.X, y = seal.Y, survey.win) # all true!
sum(grid.tf)
seal.locs <- st_transform(all.seal.locs.20070618$geometry,
CRS("+proj=longlat +datum=WGS84"))
seal.coord <- st_coordinates(seal.locs)
ggplot(data = as.data.frame(seal.coord[grid.f.ind]), aes(x = V1, y = V2)) +
geom_sf(data = survey.poly)
grid.f.ind <-  which(grid.tf == FALSE)
ggplot(data = as.data.frame(seal.coord[grid.f.ind,]), aes(x = V1, y = V2)) +
geom_sf(data = survey.poly)
View(as.data.frame(seal.coord[grid.f.ind,]))
grid.f.ind
which(grid.tf == FALSE)
grid.tf <- inside.owin(x = seal.X, y = seal.Y, footprint.win) # all but two
grid.tf
sum(grid.tf)
grid.f.ind <- which(grid.tf == FALSE)
ggplot(data = as.data.frame(seal.coord[grid.f.ind,]), aes(x = V1, y = V2)) +
geom_sf(data = survey.poly)
View(as.data.frame(seal.coord[grid.f.ind,]))
ggplot(data = as.data.frame(seal.coord[grid.f.ind,]), aes(x = X, y = Y)) +
geom_sf(data = survey.poly)
as.data.frame(seal.coord[grid.f.ind,])$X
as.data.frame(seal.coord[grid.f.ind,])$Y
ggplot(data = as.data.frame(seal.coord[grid.f.ind,]), aes(x = X, y = Y)) +
geom_sf(data = survey.poly)
View(survey.poly)
ggplot() +
geom_point(data = as.data.frame(seal.coord[grid.f.ind,]), aes(x = X, y = Y)) +
geom_sf(data = survey.poly)
ggplot() +
geom_sf(data = survey.poly) +
geom_point(data = as.data.frame(seal.coord[grid.f.ind,]), aes(x = X, y = Y))
ggplot() +
geom_sf(data = survey.poly) +
geom_point(data = as.data.frame(seal.coord[grid.f.ind,]), aes(x = X, y = Y),
size = 1)
ggplot() +
geom_sf(data = survey.poly) +
geom_point(data = as.data.frame(seal.coord[grid.f.ind,]), aes(x = X, y = Y),
size = 0.5)
# X.grid <- cbind(X.grid, ifelse(1:nrow(X.grid) %in% obs, 1, 0))
# X.grid <- na.omit(X.grid)
# obs <- which(X.grid[,4] == 1)
# X.grid <- X.grid[,-4]
row_counts <- table(factor(obs, levels = 1:nrow(X.grid)))
# x is a px1 vector of covariates at prespecified location
# beta is a px1 vector of coefficients
exp.rsf <- function(x, beta){
return(exp(t(x)%*%t(beta)))
}
# X.grid is an n.grid x p matrix of covariates
# obs is a n.obs x 1 vector of indices that marks the observed locations to corresponding grid in X.grid
# beta is a px1 vector of coefficients
SPP.lik.numquad <- function(X.grid, obs, beta){
n.obs <- length(obs)
X.grid.obs <- X.grid[obs,]
num <- prod(apply(X.grid.obs, 1, exp.rsf, beta = beta))
denom <- (sum(apply(X.grid, 1, exp.rsf, beta = beta)))^n.obs
return(num/denom)
}
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- t(beta.0)
for(k in 2:n.mcmc){
beta.prop <- rmvn(1, mu = beta, sigma = sd.tune*diag(p))
mh <- (SPP.lik.numquad(X.grid, obs, beta.prop)*dmvn(beta.prop, mu.beta, sigma.beta))/
(SPP.lik.numquad(X.grid, obs, beta)*dmvn(beta, mu.beta, sigma.beta))
if(runif(1) < mh){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
load("~/Desktop/GlacierBay_Project/SPP_lab/SPP_lab_numquad.RData")
load("mtnlion.RData")
values(elevation.rast)=scale(values(elevation.rast))
values(slope.rast)=scale(values(slope.rast))
values(exposure.rast)=scale(values(exposure.rast))
X.grid <- cbind(values(elevation.rast), values(slope.rast), values(exposure.rast))
obs <- cellFromXY(elevation.rast,mtnlion.df[,1:2])
# X.grid <- cbind(X.grid, ifelse(1:nrow(X.grid) %in% obs, 1, 0))
# X.grid <- na.omit(X.grid)
# obs <- which(X.grid[,4] == 1)
# X.grid <- X.grid[,-4]
row_counts <- table(factor(obs, levels = 1:nrow(X.grid)))
row_counts
max(row_counts)
# X.grid <- cbind(X.grid, ifelse(1:nrow(X.grid) %in% obs, 1, 0))
# X.grid <- na.omit(X.grid)
# obs <- which(X.grid[,4] == 1)
# X.grid <- X.grid[,-4]
row.counts <- table(factor(obs, levels = 1:nrow(X.grid)))
X.grid <- cbind(X.grid, row.counts)
View(X.grid)
?replace.na
?rep
obs <- c()
for(i in 1:nrow(X.grid)){
if(X.grid[i,4] != 0){
obs <- c(obs, rep(i, times = X.grid[i,4]))
}
}
load("mtnlion.RData")
values(elevation.rast)=scale(values(elevation.rast))
values(slope.rast)=scale(values(slope.rast))
values(exposure.rast)=scale(values(exposure.rast))
X.grid <- cbind(values(elevation.rast), values(slope.rast), values(exposure.rast))
# sum(is.na(values(elevation.rast))) # 0
# sum(is.na(values(slope.rast))) # 148
# sum(is.na(values(exposure.rast))) # 148
obs <- cellFromXY(elevation.rast,mtnlion.df[,1:2])
# X.grid <- cbind(X.grid, ifelse(1:nrow(X.grid) %in% obs, 1, 0))
# X.grid <- na.omit(X.grid)
# obs <- which(X.grid[,4] == 1)
# X.grid <- X.grid[,-4]
row.counts <- table(factor(obs, levels = 1:nrow(X.grid)))
X.grid <- cbind(X.grid, row.counts)
X.grid <- na.omit(X.grid)
obs <- c()
for(i in 1:nrow(X.grid)){
if(X.grid[i,4] != 0){
obs <- c(obs, rep(i, times = X.grid[i,4]))
}
}
n.mcmc <- 5000
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs)
X.grid <- X.grid[,-4]
n.mcmc <- 5000
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs)
beta.samp <- beta.samp[-(1:n.mcmc*0.2),] # discard burn-in
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
vioplot(data.frame(beta.samp),names=expression(beta[1],beta[2],beta[3]),
ylim = c(-1,1))
abline(h=0,col=8)
apply(beta.samp,2,mean) # marginal posterior means for beta
apply(beta.samp,2,sd) # marginal posterior std devs for beta
apply(beta.samp,2,quantile,c(0.025,.975))
save.image("~/Desktop/GlacierBay_Project/SPP_lab/SPP_lab_numquad.RData")
library(sf)
library(here)
library(tidyverse)
path <- here("NPS_data", "HARBORSEAL_2007", "seal_locations_final",
"all_seal_locs")
all.seal.locs.20070618 <- st_read(dsn = path, layer = "JHI_20070618_allseal_locs")
path <- here("NPS_data", "HARBORSEAL_2007", "footprints")
footprint.20070618 <- st_read(dsn = path, layer = "JHI_20070618_footprint")
path <- here("NPS_data", "HARBORSEAL_2007", "survey_polygons")
survey.poly.20070618 <- st_read(dsn = path, layer = "JHI_20070618_surveyboundary")
survey.poly <- st_transform(survey.poly.20070618$geometry,
CRS("+proj=longlat +datum=WGS84"))
survey.poly.mat <- survey.poly[[1]][[1]]
survey.win <- owin(poly = data.frame(x=rev(survey.poly.mat[,1]),
y=rev(survey.poly.mat[,2])))
seal.locs <- st_transform(all.seal.locs.20070618$geometry,
CRS("+proj=longlat +datum=WGS84"))
seal.coord <- st_coordinates(seal.locs)
seal.X <- seal.coord[,1]
seal.Y <- seal.coord[,2]
# all.seal.20070618 <- ppp(x = seal.X, y = seal.Y,
#                          owin = survey.win) # warning
# check if seal locs lie within survey boundary
grid.tf <- inside.owin(x = seal.X, y = seal.Y, survey.win) # all true!
# read in
path <- here("NPS_data", "HARBORSEAL_2007", "seal_locations_final",
"nonpup_locs")
seal.locs.20070813 <- st_read(dsn = path, layer = "JHI_20070813_nonpup_locs")
path <- here("NPS_data", "HARBORSEAL_2007", "footprints")
footprint.20070813 <- st_read(dsn = path, layer = "JHI_20070813_footprint")
path <- here("NPS_data", "HARBORSEAL_2007", "survey_polygons")
survey.poly.20070813 <- st_read(dsn = path, layer = "JHI_20070813_surveyboundary")
survey.poly <- st_transform(survey.poly.20070813$geometry,
CRS("+proj=longlat +datum=WGS84"))
survey.poly.mat <- survey.poly[[1]][[1]]
survey.win <- owin(poly = data.frame(x=rev(survey.poly.mat[,1]),
y=rev(survey.poly.mat[,2])))
seal.locs <- st_transform(all.seal.locs.20070813$geometry,
CRS("+proj=longlat +datum=WGS84"))
ggplot() +
geom_sf(data = survey.poly.20070813) +
geom_sf(data = footprint.20070813) +
geom_sf(data = seal.locs.20070813, size = 0.5)
path <- here("NPS_data", "HARBORSEAL_2007", "seal_locations_final",
"nonpup_locs")
seal.locs.20070813 <- st_read(dsn = path, layer = "JHI_20070813_nonpup_locs")
path <- here("NPS_data", "HARBORSEAL_2007", "footprints")
footprint.20070813 <- st_read(dsn = path, layer = "JHI_20070813_footprint")
path <- here("NPS_data", "HARBORSEAL_2007", "survey_polygons")
survey.poly.20070813 <- st_read(dsn = path, layer = "JHI_20070813_surveyboundary")
ggplot() +
geom_sf(data = survey.poly.20070813) +
geom_sf(data = footprint.20070813) +
geom_sf(data = seal.locs.20070813, size = 0.5)
survey.poly <- st_transform(survey.poly.20070813$geometry,
CRS("+proj=longlat +datum=WGS84"))
survey.poly.mat <- survey.poly[[1]][[1]]
survey.win <- owin(poly = data.frame(x=rev(survey.poly.mat[,1]),
y=rev(survey.poly.mat[,2])))
seal.locs <- st_transform(seal.locs.20070813$geometry,
CRS("+proj=longlat +datum=WGS84"))
seal.coord <- st_coordinates(seal.locs)
seal.X <- seal.coord[,1]
seal.Y <- seal.coord[,2]
# all.seal.20070618 <- ppp(x = seal.X, y = seal.Y,
#                          owin = survey.win) # warning
# check if seal locs lie within survey boundary
grid.tf <- inside.owin(x = seal.X, y = seal.Y, survey.win) # all true!
sum(grid.tf) # all true!
footprint <- st_transform(footprint.20070813$geometry,
CRS("+proj=longlat +datum=WGS84"))
footprint.coord <- matrix(data = footprint[[1]][[1]], nrow = 5, ncol = 2)
for(i in 2:length(footprint)){
footprint.coord <- rbind(footprint.coord, footprint[[i]][[1]])
}
footprint.win <- owin(poly = data.frame(x=rev(footprint.coord[,1]),
y=rev(footprint.coord[,2])))
grid.tf <- inside.owin(x = seal.X, y = seal.Y, footprint.win) # all but two
sum(grid.tf)
# check if seal locs lie within footprints
grid.tf <- inside.owin(x = seal.X, y = seal.Y, footprint.win)
sum(grid.tf)
library(terra)
# read in covariates
bath.rast <- raster(here("covariates", "bathymetry.tiff"))
crs(bath.rast)
install.packages("maptools")
?crop
?rast
bath.rast <- rast(bath.rast)
?subset
vect()
?vect
?extent
# read in covariates
bath.rast <- raster(here("covariates", "bathymetry.tiff"))
library(raster)
View(footprint.20070813)
extent(footprint.coord)
?mask
bath.rast.crop <- raster::crop(bath.rast, extent(footprint.coord))
baht.rast.crop <- raster::mask(bath.rast.crop, footprint)
?raster
baht.rast.crop <- raster::mask(bath.rast.crop, footprint.coord)
View(footprint)
View(footprint.20070813)
class(footprint.20070813$geometry)
as(footprint.20070813$geometry, 'Spatial')
View(survey.poly)
class(survey.poly[[1]][[1]])
class(survey.poly[[1]])
View(survey.poly.20070813)
as(survey.poly.20070813$geometry, 'Spatial')
baht.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly.20070813$geometry, 'Spatial'))
ggplot() +
geom_sf(data = bath.rast.crp)
ggplot() +
geom_sf(data = bath.rast.crop)
as.data.frame(bath.rast.crop)
View(baht.rast.crop)
bath.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly.20070813$geometry, 'Spatial'))
install.packages("tidyterra")
library(tidyterra)
ggplot() +
geom_spatraster(bath.rast.crop)
ggplot() +
geom_spatraster(data = bath.rast.crop)
bath.rast.crop <- rast(bath.rast.crop)
ggplot() +
geom_spatraster(data = bath.rast.crop)
bath.rast <- raster(here("covariates", "bathymetry.tiff"))
plot(bath.rast)
plot(st_geometry(survey.poly), add = TRUE, reset = FALSE)
plot(st_geometry(footprint.20070618), add = TRUE, reset = FALSE)
bath.rast.crop <- raster::crop(bath.rast, extent(footprint.coord))
bath.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly.20070813$geometry, 'Spatial'))
bath.rast.crop <- rast(bath.rast.crop)
ggplot() +
geom_spatraster(data = bath.rast.crop)
bath.rast.crop <- raster::crop(bath.rast, extent(footprint.coord))
bath.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly.20070813$geometry, 'Spatial'))
plot(bath.rast.crop)
plot(bath.rast)
bath.rast.crop <- raster::crop(bath.rast, extent(survey.poly.mat))
bath.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly.20070813$geometry, 'Spatial'))
plot(bath.rast.crop)
bath.rast.crop$bathymetry
View(seal.locs.20070813)
View(survey.poly.20070813)
View(survey.poly.20070813)
View(survey.poly)
as(survey.poly[[1]][[1]], 'Spatial')
class(survey.poly)
as(survey.poly, 'Spatial')
bath.rast.crop <- raster::crop(bath.rast, extent(survey.poly.mat))
bath.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly, 'Spatial'))
plot(bath.rast.crop)
plot(bath.rast.crop)
plot(survey.poly, add = TRUE)
View(survey.poly)
plot(bath.rast.crop)
plot(survey.poly, add = TRUE)
lot(bath.rast)
plot(bath.rast)
plot(survey.poly, add = TRUE)
?points
plot(bath.rast)
plot(survey.poly, add = TRUE)
points(x = seal.X, y = seal.Y)
plot(bath.rast.crop)
plot(survey.poly, add = TRUE)
points(x = seal.X, y = seal.Y, size = 0.5)
load("~/Desktop/GlacierBay_Project/SPP_lab/SPP_lab_numquad.RData")
View(mtnlion.df)
View(grid.centers)
obs
X.grid[100,]
# obtain posterior predictive samples
X.pred <- X.grid[c(100, 200),]
?cellFromXY
pred.loc <- cellfromXY(cell = pred.ind)
pred.loc <- cellFromXY(cell = pred.ind)
pred.loc <- xyFromCell(elevation.rast, cell = pred.ind)
pred.loc <- xyFromCell(elevation.rast, cell = 100)
?lapply
pred.loc <- lapply(pred.ind, xyFromCell, object = elevation.rast)
# obtain posterior predictive samples
pred.ind <- c(100, 200)
pred.loc <- lapply(pred.ind, xyFromCell, object = elevation.rast)
View(pred.loc)
as.matrix(pred.loc)
pred.mat <- rbind(pred.loc[[1]], pred.loc[[2]])
View(pred.mat)
View(beta.samp)
s.pred <- apply(beta.samp, 1, SPP.lik.numquad, X.grid = X.grid, obs = pred.ind)
beta.samp[1,]
s.pred <- apply(t(beta.samp), 2, SPP.lik.numquad, X.grid = X.grid, obs = pred.ind)
t(X.grid[100,])
t(beta.samp[1,])
beta.samp[1,]
?dot
dot(beta.samp[1,], X.grid[100,])
library(geometry)
install.packages("geometry")
library(geometry)
?dot
dot(beta.samp[1,], X.grid[100,])
exp.rsf <- function(x, beta){
return(exp(dot(x,beta)))
}
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- beta.0
for(k in 2:n.mcmc){
beta.prop <- rmvn(1, mu = beta, sigma = sd.tune*diag(p))
mh <- (SPP.lik.numquad(X.grid, obs, beta.prop)*dmvn(beta.prop, mu.beta, sigma.beta))/
(SPP.lik.numquad(X.grid, obs, beta)*dmvn(beta, mu.beta, sigma.beta))
if(runif(1) < mh){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
s.pred <- apply(beta.samp, 1, SPP.lik.numquad, X.grid = X.grid, obs = pred.ind)
s.pred.post <- s.pred
hist(s.pred.post)
