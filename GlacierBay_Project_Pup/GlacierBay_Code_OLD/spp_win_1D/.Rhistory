beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
pois.glm.out <- glm(y~elev+slope+exposure,family=poisson(link="log"),data=rsf.1.df)
beta.0 <- pois.glm.out$coefficients[-1] # throw away intercept
p <- length(beta.0)
# prepare X.grid and obs
load("mtnlion.RData")
values(elevation.rast)=scale(values(elevation.rast))
values(slope.rast)=scale(values(slope.rast))
values(exposure.rast)=scale(values(exposure.rast))
X.grid <- cbind(values(elevation.rast), values(slope.rast), values(exposure.rast))
obs <- cellFromXY(elevation.rast,mtnlion.df[,1:2])
# X.grid <- cbind(X.grid, ifelse(1:nrow(X.grid) %in% obs, 1, 0))
# X.grid <- na.omit(X.grid)
# obs <- which(X.grid[,4] == 1)
# X.grid <- X.grid[,-4]
row.counts <- table(factor(obs, levels = 1:nrow(X.grid)))
X.grid <- cbind(X.grid, row.counts)
X.grid <- na.omit(X.grid)
obs <- c()
for(i in 1:nrow(X.grid)){
if(X.grid[i,4] != 0){
obs <- c(obs, rep(i, times = X.grid[i,4]))
}
}
X.grid <- X.grid[,-4]
n.mcmc <- 5000
cell.res <- res(elevation.rast)
cell.size <- cell.res[1] * cell.res[2]
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs)
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs, cell.size){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- beta.0
for(k in 2:n.mcmc){
beta.prop <- as.vector(rmvn(1, mu = beta, sigma = sd.tune*diag(p)))
mh <- (exp(SPP.joint.log.lik.numquad(X.grid, obs, beta.prop, cell.size))*
dmvn(beta.prop, mu.beta, sigma.beta))/
(exp(SPP.joint.log.lik.numquad(X.grid, obs, beta, cell.size))*
dmvn(beta, mu.beta, sigma.beta))
if(runif(1) < mh){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs)
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
SPP.joint.lik.numquad <- function(X.grid, obs, beta, cell.size){
n.obs <- length(obs)
X.grid.obs <- X.grid[obs,]
num <- prod(apply(X.grid.obs, 1, exp.rsf, beta = beta))
denom <- (cell.size*(sum(apply(X.grid, 1, exp.rsf, beta = beta))))^n.obs
return(num/denom)
}
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs, cell.size){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- beta.0
for(k in 2:n.mcmc){
beta.prop <- as.vector(rmvn(1, mu = beta, sigma = sd.tune*diag(p)))
mh <- (exp(SPP.joint.lik.numquad(X.grid, obs, beta.prop, cell.size))*
dmvn(beta.prop, mu.beta, sigma.beta))/
(exp(SPP.joint.lik.numquad(X.grid, obs, beta, cell.size))*
dmvn(beta, mu.beta, sigma.beta))
if(runif(1) < mh){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
# run mcmc
n.mcmc <- 1000
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
SPP.joint.lik.numquad <- function(X.grid, obs, beta, cell.size){
n.obs <- length(obs)
X.grid.obs <- X.grid[obs,]
num <- prod(apply(X.grid.obs, 1, exp.rsf, beta = beta))
denom <- ((sum(apply(X.grid, 1, exp.rsf, beta = beta))))^n.obs
return(num/denom)
}
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
beta.samp <- beta.samp[-(1:n.mcmc*0.2),] # discard burn-in
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
n.mcmc <- 5000
cell.res <- res(elevation.rast)
cell.size <- cell.res[1] * cell.res[2]
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
beta.samp <- beta.samp[-(1:n.mcmc*0.2),] # discard burn-in
# trace plots
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
exp.rsf <- function(x, beta){
return(exp(dot(x,beta)))
}
# X.grid is an n.grid x p matrix of covariates
# obs is an n.obs x 1 vector of indices that map observed loc to corresponding row in X.grid
# beta is a px1 vector of coefficients
SPP.joint.lik.numquad <- function(X.grid, obs, beta){
n.obs <- length(obs)
X.grid.obs <- X.grid[obs,]
num <- prod(apply(X.grid.obs, 1, exp.rsf, beta = beta))
denom <- (sum(apply(X.grid, 1, exp.rsf, beta = beta)))^n.obs
return(num/denom)
}
# multiply by cell size
# take log for stability
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- beta.0
for(k in 2:n.mcmc){
beta.prop <- as.vector(rmvn(1, mu = beta, sigma = sd.tune*diag(p)))
mh <- (SPP.joint.lik.numquad(X.grid, obs, beta.prop)*
dmvn(beta.prop, mu.beta, sigma.beta))/
(SPP.joint.lik.numquad(X.grid, obs, beta)*
dmvn(beta, mu.beta, sigma.beta))
if(runif(1) < mh){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs)
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
SPP.joint.lik.numquad <- function(X.grid, obs, beta, cell.size){
n.obs <- length(obs)
X.grid.obs <- X.grid[obs,]
num <- prod(apply(X.grid.obs, 1, exp.rsf, beta = beta))
denom <- (cell.size*sum(apply(X.grid, 1, exp.rsf, beta = beta)))^n.obs
return(num/denom)
}
# multiply by cell size
# take log for stability
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs, cell.size){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- beta.0
for(k in 2:n.mcmc){
beta.prop <- as.vector(rmvn(1, mu = beta, sigma = sd.tune*diag(p)))
mh <- (SPP.joint.lik.numquad(X.grid, obs, beta.prop, cell.size)*
dmvn(beta.prop, mu.beta, sigma.beta))/
(SPP.joint.lik.numquad(X.grid, obs, beta, cell.size)*
dmvn(beta, mu.beta, sigma.beta))
if(runif(1) < mh){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
n.mcmc <- 5000
cell.res <- res(elevation.rast)
cell.size <- cell.res[1] * cell.res[2]
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
exp.rsf <- function(x, beta, log = FALSE){
out <- dot(x,beta)
if(log == FALSE){
out <- exp(out)
}
return(out)
}
SPP.joint.log.lik.numquad <- function(X.grid, obs, beta, cell.size){
n.obs <- length(obs)
X.grid.obs <- X.grid[obs,]
num <- sum(apply(X.grid.obs, 1, exp.rsf, beta = beta, log = TRUE))
denom <- n.obs*log(cell.size) + n.obs*log(sum(apply(X.grid, 1, exp.rsf, beta = beta)))
return(num/denom)
}
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs, cell.size){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- beta.0
for(k in 2:n.mcmc){
beta.prop <- as.vector(rmvn(1, mu = beta, sigma = sd.tune*diag(p)))
mh <- (SPP.joint.log.lik.numquad(X.grid, obs, beta.prop, cell.size)*
dmvn(beta.prop, mu.beta, sigma.beta))/
(SPP.joint.log.lik.numquad(X.grid, obs, beta, cell.size)*
dmvn(beta, mu.beta, sigma.beta))
if(runif(1) < mh){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
beta.samp <- beta.samp[-(1:n.mcmc*0.2),] # discard burn-in
# trace plots
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
length(obs)
log(cell.size)
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs, cell.size){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- beta.0
for(k in 2:n.mcmc){
beta.prop <- as.vector(rmvn(1, mu = beta, sigma = sd.tune*diag(p)))
mh <- (exp(SPP.joint.log.lik.numquad(X.grid, obs, beta.prop, cell.size))*
dmvn(beta.prop, mu.beta, sigma.beta))/
(exp(SPP.joint.log.lik.numquad(X.grid, obs, beta, cell.size))*
dmvn(beta, mu.beta, sigma.beta))
if(runif(1) < mh){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
SPP.joint.log.lik.numquad <- function(X.grid, obs, beta, cell.size){
n.obs <- length(obs)
X.grid.obs <- X.grid[obs,]
num <- sum(apply(X.grid.obs, 1, exp.rsf, beta = beta, log = TRUE))
denom <- n.obs*log(cell.size) + n.obs*log(sum(apply(X.grid, 1, exp.rsf, beta = beta)))
return(num - denom)
}
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs, cell.size){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- beta.0
for(k in 2:n.mcmc){
beta.prop <- as.vector(rmvn(1, mu = beta, sigma = sd.tune*diag(p)))
mh <- (exp(SPP.joint.log.lik.numquad(X.grid, obs, beta.prop, cell.size))*
dmvn(beta.prop, mu.beta, sigma.beta))/
(exp(SPP.joint.log.lik.numquad(X.grid, obs, beta, cell.size))*
dmvn(beta, mu.beta, sigma.beta))
if(runif(1) < mh){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
# run mcmc
n.mcmc <- 1000
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
?dmvn
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs, cell.size){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- beta.0
for(k in 2:n.mcmc){
beta.prop <- as.vector(rmvn(1, mu = beta, sigma = sd.tune*diag(p)))
mh <- (SPP.joint.log.lik.numquad(X.grid, obs, beta.prop, cell.size) +
dmvn(beta.prop, mu.beta, sigma.beta, log = TRUE)) -
(SPP.joint.log.lik.numquad(X.grid, obs, beta, cell.size) +
dmvn(beta, mu.beta, sigma.beta, log = TRUE))
if(runif(1) < exp(mh)){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
exp.rsf <- function(x, beta, log = FALSE){
out <- dot(x,beta)
if(log == FALSE){
out <- exp(out)
}
return(out)
}
SPP.joint.log.lik.numquad <- function(X.grid, obs, beta, cell.size){
n.obs <- length(obs)
X.grid.obs <- X.grid[obs,]
num <- sum(apply(X.grid.obs, 1, exp.rsf, beta = beta, log = TRUE))
denom <- n.obs*log(cell.size) + n.obs*log(sum(apply(X.grid, 1, exp.rsf, beta = beta)))
return(num - denom)
}
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
apply(beta.samp,2,mean) # marginal posterior means for beta
apply(beta.samp,2,sd) # marginal posterior std devs for beta
apply(beta.samp,2,quantile,c(0.025,.975))
beta.0
n.mcmc <- 5000
cell.res <- res(elevation.rast)
cell.size <- cell.res[1] * cell.res[2]
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
beta.samp <- beta.samp[-(1:n.mcmc*0.2),] # discard burn-in
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
SPP.joint.log.lik.numquad <- function(X.grid, obs, beta, cell.size){
n.obs <- length(obs)
X.grid.obs <- X.grid[obs,]
num <- sum(apply(X.grid.obs, 1, exp.rsf, beta = beta, log = TRUE))
denom <- n.obs*log(sum(apply(X.grid, 1, exp.rsf, beta = beta)))
return(num - denom)
}
n.mcmc <- 5000
cell.res <- res(elevation.rast)
cell.size <- cell.res[1] * cell.res[2]
beta.samp <- mcmc(n.mcmc, rep(0, p), 10*diag(p), beta.0, X.grid, obs, cell.size)
beta.samp <- beta.samp[-(1:n.mcmc*0.2),] # discard burn-in
plot(beta.samp[,1], type = "l", col = "red", ylim = c(-1, 1))
lines(beta.samp[,2], col = "blue")
lines(beta.samp[,3], col = "green")
apply(beta.samp,2,mean) # marginal posterior means for beta
apply(beta.samp,2,sd) # marginal posterior std devs for beta
apply(beta.samp,2,quantile,c(0.025,.975))
summary(pois.glm.out)
# Set spatial support
hr.tmp=draw.contour(mtnlion.df[,1:2],bw=NULL,alpha=.99) # read-in
bg.cells=cellFromXY(elev.NA.rast,cbind(bg.ppp$x,bg.ppp$y))
y.binary=rep(0,n+n.bg)
elev.binary=rep(0,n+n.bg)
slope.binary=rep(0,n+n.bg)
exposure.binary=rep(0,n+n.bg)
y.binary[1:n]=1
elev.binary[1:n]=values(elev.NA.rast)[mtnlion.cells]
slope.binary[1:n]=values(slope.NA.rast)[mtnlion.cells]
exposure.binary[1:n]=values(exposure.NA.rast)[mtnlion.cells]
elev.binary[-(1:n)]=values(elev.NA.rast)[bg.cells]
slope.binary[-(1:n)]=values(slope.NA.rast)[bg.cells]
exposure.binary[-(1:n)]=values(exposure.NA.rast)[bg.cells]
rsf.2.df=data.frame(y=y.binary,elev=elev.binary,slope=slope.binary,exposure=exposure.binary)
# fit Bernoulli GLM
summary(glm(y~elev+slope+exposure,family=binomial(link="logit"),data=rsf.2.df))
# fit Bernoulli GLM
summary(glm(y~elev+slope+exposure,family=binomial(link="probit"),data=rsf.2.df))
summary(glm(y~0+elev+slope+exposure,family=binomial(link="logit"),data=rsf.2.df))
X.grid
View(X.grid)
S.domain=c(0,1)
n.win=3
tot.area=S.domain[2]-S.domain[1]
tot.win.area=.5*tot.area
win.area=tot.win.area/n.win
tot.nonwin.area=tot.area-tot.win.area
nonwin.area=tot.nonwin.area/(n.win+1)
S.subdomain.mat=matrix(cumsum(rep(c(nonwin.area,win.area),n.win)),,2,byrow=TRUE)
m=10000 # number of quadrature points
s.full=seq(S.domain[1],S.domain[2],,m)
X.full=matrix(0,m,2)
X.full[,1]=s.full
X.full[,2]=sin(20*s.full)
ds=X.full[2,1]-X.full[1,1]
beta=c(2,1)
beta.0=4
lam.full=exp(beta.0+X.full%*%beta)
lam.max=max(lam.full)
M=rpois(1,lam.max)
s.superpop=runif(M,S.domain[1],S.domain[2]) # potential starting points
X.superpop=cbind(s.superpop,sin(20*s.superpop))
lam.superpop=exp(beta.0+X.superpop%*%beta)
tot.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.tot=s.superpop[tot.idx] # total observed points
X.tot=X.superpop[tot.idx,]
N=length(s.tot)
win.idx=NULL
win.full.idx=NULL
for(j in 1:n.win){
tmp.win.idx=(1:N)[(s.tot>S.subdomain.mat[j,1])&(s.tot<S.subdomain.mat[j,2])]
win.idx=c(win.idx,tmp.win.idx)
tmp.full.idx=(1:m)[(s.full>S.subdomain.mat[j,1])&(s.full<S.subdomain.mat[j,2])]
win.full.idx=c(win.full.idx,tmp.full.idx)
}
n=length(win.idx)
s.win=s.tot[win.idx]
X.win=X.tot[win.idx,]
X.win.full=X.full[win.full.idx,]
X.nowin.full=X.full[-win.full.idx,]
win.area=sum(S.subdomain.mat[,2]-S.subdomain.mat[,1])
layout(matrix(1:3,3,1))
layout(matrix(1:3,3,1))
plot(function(x){exp(beta.0+beta[1]*x+beta[2]*sin(20*x))},xlab="location",ylab=bquote(lambda),from=S.domain[1],to=S.domain[2],n=1000)
apply(S.subdomain.mat,1,function(x){rect(x[1],par("usr")[3],x[2],par("usr")[4],col=rgb(0,0,0,.05),border=NA)})
rug(s.superpop,.05,col=rgb(0,0,0,.2));rug(s.tot,.05,lwd=1.5,col=rgb(1,0,0,.5));rug(s.win,.05,lwd=1.5,col=3)
plot(function(x){x},xlab="location",ylab=bquote(x[1]),from=S.domain[1],to=S.domain[2],n=1000)
apply(S.subdomain.mat,1,function(x){rect(x[1],par("usr")[3],x[2],par("usr")[4],col=rgb(0,0,0,.05),border=NA)})
rug(s.tot,.05,lwd=1.5,col=rgb(1,0,0,.5));rug(s.win,.05,lwd=1.5,col=3)
plot(function(x){sin(20*x)},xlab="location",ylab=bquote(x[2]),from=S.domain[1],to=S.domain[2],n=1000)
apply(S.subdomain.mat,1,function(x){rect(x[1],par("usr")[3],x[2],par("usr")[4],col=rgb(0,0,0,.05),border=NA)})
rug(s.tot,.05,lwd=1.5,col=rgb(1,0,0,.5));rug(s.win,.05,lwd=1.5,col=3)
n.mcmc=100000
source("spp.comp.mcmc.R")
setwd("~/Downloads/spp_win")
n.mcmc=100000
source("spp.comp.mcmc.R")
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
layout(matrix(1:2,2,1))
plot(out.comp.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.comp.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
layout(matrix(1:2,2,1))
plot(out.cond.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
source("spp.stg2.mcmc.R")
out.cond.2.full=spp.stg2.mcmc(out.cond.full)
layout(matrix(1:2,2,1))
plot(out.cond.2.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.2.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
layout(matrix(1:3,1,3))
hist(out.comp.full$beta.0.save,prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]))
lines(density(out.cond.full$beta.0.save,n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.0.save,n=1000),col=3,lwd=2)
hist(out.comp.full$beta.save[1,],prob=TRUE,breaks=60,main="",xlab=bquote(beta[1]))
lines(density(out.cond.full$beta.save[1,],n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.save[1,],n=1000),col=3,lwd=2)
hist(out.comp.full$beta.save[2,],prob=TRUE,breaks=60,main="",xlab=bquote(beta[2]))
lines(density(out.cond.full$beta.save[2,],n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.save[2,],n=1000),col=3,lwd=2)
N.save=rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%10000==0){cat(k," ")}
beta.0.tmp=out.cond.2.full$beta.0.save[k]
beta.tmp=out.cond.2.full$beta.save[,k]
lam.nowin.int=sum(exp(log(ds)+beta.0.tmp+X.nowin.full%*%beta.tmp))
N.save[k]=n+rpois(1,lam.nowin.int)
};cat("\n")
plot(N.save,type="l")
abline(h=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
par(mfrow = c(1,1))
plot(N.save,type="l")
abline(h=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
hist(N.save,breaks=50,prob=TRUE,main="",xlab="N")
abline(v=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
n
idx.sm=seq(1,m,10)
m.sm=length(idx.sm)
s.sm=s.full[idx.sm]
X.sm=X.full[idx.sm,]
lam.save=matrix(0,m.sm,n.mcmc)
for(k in 1:n.mcmc){
if(k%%10000==0){cat(k," ")}
beta.0.tmp=out.cond.2.full$beta.0.save[k]
beta.tmp=out.cond.2.full$beta.save[,k]
lam.save[,k]=exp(beta.0.tmp+X.sm%*%beta.tmp)
};cat("\n")
lam.mn=apply(lam.save,1,mean)
lam.u=apply(lam.save,1,quantile,.975)
lam.l=apply(lam.save,1,quantile,.025)
plot(s.sm,exp(beta.0+X.sm%*%beta),xlab="location",ylab=bquote(lambda),col=3,type="l")
polygon(c(s.sm,rev(s.sm)),c(lam.u,rev(lam.l)),col=rgb(0,0,0,.2),border=NA)
lines(s.sm,lam.mn,col=1,lwd=2)
