bath.rast.crop <- raster::crop(bath.rast, extent(footprint.coord))
baht.rast.crop <- raster::mask(bath.rast.crop, footprint)
?raster
baht.rast.crop <- raster::mask(bath.rast.crop, footprint.coord)
View(footprint)
View(footprint.20070813)
class(footprint.20070813$geometry)
as(footprint.20070813$geometry, 'Spatial')
View(survey.poly)
class(survey.poly[[1]][[1]])
class(survey.poly[[1]])
View(survey.poly.20070813)
as(survey.poly.20070813$geometry, 'Spatial')
baht.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly.20070813$geometry, 'Spatial'))
ggplot() +
geom_sf(data = bath.rast.crp)
ggplot() +
geom_sf(data = bath.rast.crop)
as.data.frame(bath.rast.crop)
View(baht.rast.crop)
bath.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly.20070813$geometry, 'Spatial'))
install.packages("tidyterra")
library(tidyterra)
ggplot() +
geom_spatraster(bath.rast.crop)
ggplot() +
geom_spatraster(data = bath.rast.crop)
bath.rast.crop <- rast(bath.rast.crop)
ggplot() +
geom_spatraster(data = bath.rast.crop)
bath.rast <- raster(here("covariates", "bathymetry.tiff"))
plot(bath.rast)
plot(st_geometry(survey.poly), add = TRUE, reset = FALSE)
plot(st_geometry(footprint.20070618), add = TRUE, reset = FALSE)
bath.rast.crop <- raster::crop(bath.rast, extent(footprint.coord))
bath.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly.20070813$geometry, 'Spatial'))
bath.rast.crop <- rast(bath.rast.crop)
ggplot() +
geom_spatraster(data = bath.rast.crop)
bath.rast.crop <- raster::crop(bath.rast, extent(footprint.coord))
bath.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly.20070813$geometry, 'Spatial'))
plot(bath.rast.crop)
plot(bath.rast)
bath.rast.crop <- raster::crop(bath.rast, extent(survey.poly.mat))
bath.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly.20070813$geometry, 'Spatial'))
plot(bath.rast.crop)
bath.rast.crop$bathymetry
View(seal.locs.20070813)
View(survey.poly.20070813)
View(survey.poly.20070813)
View(survey.poly)
as(survey.poly[[1]][[1]], 'Spatial')
class(survey.poly)
as(survey.poly, 'Spatial')
bath.rast.crop <- raster::crop(bath.rast, extent(survey.poly.mat))
bath.rast.crop <- raster::mask(bath.rast.crop, as(survey.poly, 'Spatial'))
plot(bath.rast.crop)
plot(bath.rast.crop)
plot(survey.poly, add = TRUE)
View(survey.poly)
plot(bath.rast.crop)
plot(survey.poly, add = TRUE)
lot(bath.rast)
plot(bath.rast)
plot(survey.poly, add = TRUE)
?points
plot(bath.rast)
plot(survey.poly, add = TRUE)
points(x = seal.X, y = seal.Y)
plot(bath.rast.crop)
plot(survey.poly, add = TRUE)
points(x = seal.X, y = seal.Y, size = 0.5)
load("~/Desktop/GlacierBay_Project/SPP_lab/SPP_lab_numquad.RData")
View(mtnlion.df)
View(grid.centers)
obs
X.grid[100,]
# obtain posterior predictive samples
X.pred <- X.grid[c(100, 200),]
?cellFromXY
pred.loc <- cellfromXY(cell = pred.ind)
pred.loc <- cellFromXY(cell = pred.ind)
pred.loc <- xyFromCell(elevation.rast, cell = pred.ind)
pred.loc <- xyFromCell(elevation.rast, cell = 100)
?lapply
pred.loc <- lapply(pred.ind, xyFromCell, object = elevation.rast)
# obtain posterior predictive samples
pred.ind <- c(100, 200)
pred.loc <- lapply(pred.ind, xyFromCell, object = elevation.rast)
View(pred.loc)
as.matrix(pred.loc)
pred.mat <- rbind(pred.loc[[1]], pred.loc[[2]])
View(pred.mat)
View(beta.samp)
s.pred <- apply(beta.samp, 1, SPP.lik.numquad, X.grid = X.grid, obs = pred.ind)
beta.samp[1,]
s.pred <- apply(t(beta.samp), 2, SPP.lik.numquad, X.grid = X.grid, obs = pred.ind)
t(X.grid[100,])
t(beta.samp[1,])
beta.samp[1,]
?dot
dot(beta.samp[1,], X.grid[100,])
library(geometry)
install.packages("geometry")
library(geometry)
?dot
dot(beta.samp[1,], X.grid[100,])
exp.rsf <- function(x, beta){
return(exp(dot(x,beta)))
}
mcmc <- function(n.mcmc, mu.beta, sigma.beta, beta.0, X.grid, obs){
p <- length(beta.0)
beta.save <- matrix(nrow = n.mcmc, ncol = p)
beta.save[1,] <- beta.0
sd.tune <- 0.01
beta <- beta.0
for(k in 2:n.mcmc){
beta.prop <- rmvn(1, mu = beta, sigma = sd.tune*diag(p))
mh <- (SPP.lik.numquad(X.grid, obs, beta.prop)*dmvn(beta.prop, mu.beta, sigma.beta))/
(SPP.lik.numquad(X.grid, obs, beta)*dmvn(beta, mu.beta, sigma.beta))
if(runif(1) < mh){
beta <- beta.prop
}
beta.save[k,] <- beta
if(k %% 100 == 0){
print(k)
}
}
return(beta.save)
}
s.pred <- apply(beta.samp, 1, SPP.lik.numquad, X.grid = X.grid, obs = pred.ind)
s.pred.post <- s.pred
hist(s.pred.post)
library(tidyverse)
library(raster)
# --- Simulate 2D data ---------------------------------------------------------
set.seed(1234)
# create domain
x.domain <- c(0,1)
y.domain <- c(0,1)
n.win <- 2
tot.area <- (x.domain[2] - x.domain[1])*(y.domain[2] - y.domain[1])
tot.win.area <- tot.area/2
win.area <- tot.win.area/n.win
tot.nonwin.area <- tot.area - tot.win.area
nonwin.area <- tot.nonwin.area/n.win
# get quadrature grid
x.m <- 100
y.m <- 100
m <- x.m*y.m
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
y.full <- x.full
s.full <- expand.grid(x = x.full, y = y.full)
ds <- (x.full[2] - x.full[1])^2
# set X matrix
X.full <- matrix(0,m,2)
x1 <- s.full[,1]
x2 <- s.full[,2]
X.full[,1] <- x1
X.full[,2] <- x2
# set beta
beta <- c(2,1)
beta.0 <- 4
lam.full <- exp(beta.0+X.full%*%beta)
lam.max <- max(lam.full)
# plot covariates and lambda
full.df <- as.data.frame(cbind(s.full, x1, x2, lam.full))
ggplot(data = full.df, aes(x = x, y = y, col = x)) +
geom_point(size = 0.5)
ggplot(data = full.df, aes(x = x, y = y, col = y)) +
geom_point(size = 0.5)
ggplot(data = full.df, aes(x = x, y = y, col = lam.full)) +
geom_point(size = 0.5)
full.df <- full.df %>% rename(z = lam.full)
full.raster <- rasterFromXYZ(full.df)
M=rpois(1, lam.max)
x.superpop <- runif(M, x.domain[1], x.domain[2])
y.superpop <- runif(M, y.domain[1], y.domain[2])
s.superpop <- cbind(x.superpop, y.superpop)
X.superpop <- cbind(x.superpop, y.superpop)
lam.superpop=exp(beta.0+X.superpop%*%beta)
obs.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.obs=s.superpop[obs.idx,] # total observed points
X.obs=X.superpop[obs.idx,]
lam.obs <- lam.superpop[obs.idx]
N=nrow(s.obs)
superpop.df <- as.data.frame(cbind(x.superpop, y.superpop, lam.superpop))
ggplot(data = superpop.df, aes(x = x.superpop, y = y.superpop, col = lam.superpop)) +
geom_point(size = 0.5)
obs.win <- ((s.obs[,1] < 0.5) & (s.obs[,2] > 0.5)) |
((s.obs[,1] > 0.5) & (s.obs[,2] < 0.5))
obs.win.idx <- (1:N)[obs.win]
full.win <- ((s.full[,1] < 0.5) & (s.full[,2] > 0.5)) |
((s.full[,1] > 0.5) & (s.full[,2] < 0.5))
full.win.idx <- (1:m)[full.win]
n=length(obs.win.idx)
s.win=s.obs[obs.win.idx,]
X.win=X.tot[obs.win.idx,]
s.win=s.obs[obs.win.idx,]
X.win=X.obs[obs.win.idx,]
X.win.full=X.full[full.win.idx,]
X.nowin.full=X.full[-full.win.idx,]
obs.df <- as.data.frame(s.obs)
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop,
col = factor(obs.win))) +
geom_point()
n.mcmc=100000
source("spp.comp.mcmc.R")
setwd("~/Desktop/GlacierBay_Project/GlacierBay_Code/spp_win_2D")
n.mcmc=100000
source("spp.comp.mcmc.R")
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
layout(matrix(1:2,2,1))
plot(out.comp.full$beta.0.save,type="l")
layout(matrix(1:2,2,1))
plot(out.comp.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.comp.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
layout(matrix(1:2,2,1))
plot(out.cond.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
source("spp.stg2.mcmc.R")
out.cond.2.full=spp.stg2.mcmc(out.cond.full)
layout(matrix(1:2,2,1))
plot(out.cond.2.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.2.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
mean(out.cond.full$beta.save[1,])
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
layout(matrix(1:2,2,1))
plot(out.cond.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
layout(matrix(1:2,2,1))
plot(out.cond.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
layout(matrix(1:2,2,1))
plot(out.cond.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
layout(matrix(1:2,2,1))
plot(out.cond.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
debug(spp.cond.mcmc)
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
Q
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
layout(matrix(1:2,2,1))
dev.off()
layout(matrix(1:2,2,1))
plot(out.cond.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
source("spp.stg2.mcmc.R")
out.cond.2.full=spp.stg2.mcmc(out.cond.full)
layout(matrix(1:2,2,1))
plot(out.cond.2.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.2.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
layout(matrix(1:3,1,3))
hist(out.comp.full$beta.0.save,prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]))
lines(density(out.cond.full$beta.0.save,n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.0.save,n=1000),col=3,lwd=2)
hist(out.comp.full$beta.save[1,],prob=TRUE,breaks=60,main="",xlab=bquote(beta[1]))
lines(density(out.cond.full$beta.save[1,],n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.save[1,],n=1000),col=3,lwd=2)
hist(out.comp.full$beta.save[2,],prob=TRUE,breaks=60,main="",xlab=bquote(beta[2]))
lines(density(out.cond.full$beta.save[2,],n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.save[2,],n=1000),col=3,lwd=2)
hist(out.comp.full$beta.0.save,prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(out.cond.full$beta.0.save,n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.0.save,n=1000),col=3,lwd=2)
hist(out.comp.full$beta.save[1,],prob=TRUE,breaks=60,main="",xlab=bquote(beta[1]),
ylim = c(0,1))
lines(density(out.cond.full$beta.save[1,],n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.save[1,],n=1000),col=3,lwd=2)
hist(out.comp.full$beta.save[2,],prob=TRUE,breaks=60,main="",xlab=bquote(beta[2]),
ylim = c(0,1))
lines(density(out.cond.full$beta.save[2,],n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.save[2,],n=1000),col=3,lwd=2)
N.save=rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%10000==0){cat(k," ")}
beta.0.tmp=out.cond.2.full$beta.0.save[k]
beta.tmp=out.cond.2.full$beta.save[,k]
lam.nowin.int=sum(exp(log(ds)+beta.0.tmp+X.nowin.full%*%beta.tmp))
N.save[k]=n+rpois(1,lam.nowin.int)
};cat("\n")
plot(N.save,type="l")
abline(h=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
hist(N.save,breaks=50,prob=TRUE,main="",xlab="N")
abline(v=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
par(mfrow = c(1,1))
plot(N.save,type="l")
abline(h=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
hist(N.save,breaks=50,prob=TRUE,main="",xlab="N")
abline(v=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
idx.sm=seq(1,m,10)
m.sm=length(idx.sm)
s.sm=s.full[idx.sm]
View(s.full)
idx.sm
m.sm=length(idx.sm)
s.sm=s.full[idx.sm]
max(idx.sm)
s.sm=s.full[idx.sm,]
X.sm=X.full[idx.sm,]
lam.save=matrix(0,m.sm,n.mcmc)
for(k in 1:n.mcmc){
if(k%%10000==0){cat(k," ")}
beta.0.tmp=out.cond.2.full$beta.0.save[k]
beta.tmp=out.cond.2.full$beta.save[,k]
lam.save[,k]=exp(beta.0.tmp+X.sm%*%beta.tmp)
};cat("\n")
lam.mn=apply(lam.save,1,mean)
lam.u=apply(lam.save,1,quantile,.975)
lam.l=apply(lam.save,1,quantile,.025)
plot(s.sm,exp(beta.0+X.sm%*%beta),xlab="location",ylab=bquote(lambda),col=3,type="l")
plot(s.sm,exp(beta.0+X.sm%*%beta),xlab="location",ylab=bquote(lambda),col=3,type="l")
dev.off()
plot(s.sm,exp(beta.0+X.sm%*%beta),xlab="location",ylab=bquote(lambda),col=3,type="l")
lam.ppd.df <- as.data.frame(cbind(s.sm, lam.mn))
View(lam.ppd.df)
ggplot(data = lam.ppd.df, aes(x = x, y = y, col = lam.mn)) +
geom_point(size = 0.5)
idx.sm=seq(1,m,2)
m.sm=length(idx.sm)
s.sm=s.full[idx.sm,]
X.sm=X.full[idx.sm,]
lam.save=matrix(0,m.sm,n.mcmc)
for(k in 1:n.mcmc){
if(k%%10000==0){cat(k," ")}
beta.0.tmp=out.cond.2.full$beta.0.save[k]
beta.tmp=out.cond.2.full$beta.save[,k]
lam.save[,k]=exp(beta.0.tmp+X.sm%*%beta.tmp)
};cat("\n")
lam.mn=apply(lam.save,1,mean)
lam.u=apply(lam.save,1,quantile,.975)
lam.l=apply(lam.save,1,quantile,.025)
# plot(s.sm,exp(beta.0+X.sm%*%beta),xlab="location",ylab=bquote(lambda),col=3,type="l")
# polygon(c(s.sm,rev(s.sm)),c(lam.u,rev(lam.l)),col=rgb(0,0,0,.2),border=NA)
# lines(s.sm,lam.mn,col=1,lwd=2)
lam.ppd.df <- as.data.frame(cbind(s.sm, lam.mn))
ggplot(data = lam.ppd.df, aes(x = x, y = y, col = lam.mn)) +
geom_point(size = 0.5)
lam.save=matrix(0,m,n.mcmc)
for(k in 1:n.mcmc){
if(k%%10000==0){cat(k," ")}
beta.0.tmp=out.cond.2.full$beta.0.save[k]
beta.tmp=out.cond.2.full$beta.save[,k]
lam.save[,k]=exp(beta.0.tmp+X.full%*%beta.tmp)
};cat("\n")
lam.ppd.df <- as.data.frame(cbind(s.sm, lam.mn))
ggplot(data = lam.ppd.df, aes(x = x, y = y, col = lam.mn)) +
geom_point(size = 0.5)
lam.mn=apply(lam.save,1,mean)
lam.ppd.df <- as.data.frame(cbind(s.sm, lam.mn))
ggplot(data = lam.ppd.df, aes(x = x, y = y, col = lam.mn)) +
geom_point(size = 0.5)
lam.mn
lam.ppd.df <- as.data.frame(cbind(s.full, lam.mn))
ggplot(data = lam.ppd.df, aes(x = x, y = y, col = lam.mn)) +
geom_point(size = 0.5)
ggplot(data = full.df, aes(x = x, y = y, col = x)) +
geom_point(size = 0.5)
library(spatstat)
?rpoispp
mean(N.save)
plot(N.save,type="l")
abline(h=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
0.1*n.mcmc
mean(N.save[-(1:(0.1*n.mcmc))])
library(tidyverse)
library(raster)
library(spatstat)
set.seed(1234)
# create domain
x.domain <- c(0,1)
y.domain <- c(0,1)
n.win <- 2
tot.area <- (x.domain[2] - x.domain[1])*(y.domain[2] - y.domain[1])
tot.win.area <- tot.area/2
win.area <- tot.win.area/n.win
tot.nonwin.area <- tot.area - tot.win.area
nonwin.area <- tot.nonwin.area/n.win
x.m <- 100
y.m <- 100
m <- x.m*y.m
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
y.full <- x.full
s.full <- expand.grid(x = x.full, y = y.full)
ds <- (x.full[2] - x.full[1])^2
# set X matrix
X.full <- matrix(0,m,2)
x1 <- s.full[,1]
x2 <- s.full[,2]
X.full[,1] <- x1
X.full[,2] <- x2
beta <- c(2,1)
beta.0 <- 4
lam.full <- exp(beta.0+X.full%*%beta)
lam.max <- max(lam.full)
# plot covariates and lambda
full.df <- as.data.frame(cbind(s.full, x1, x2, lam.full))
ggplot(data = full.df, aes(x = x, y = y, col = x)) +
geom_point(size = 0.5)
ggplot(data = full.df, aes(x = x, y = y, col = y)) +
geom_point(size = 0.5)
full.df <- as.data.frame(cbind(s.full, x1, x2, lam.full))
ggplot(data = full.df, aes(x = x, y = y, col = x)) +
geom_point(size = 0.5)
ggplot(data = full.df, aes(x = x, y = y, col = y)) +
geom_point(size = 0.5)
ggplot(data = full.df, aes(x = x, y = y, col = lam.full)) +
geom_point(size = 0.5)
# create full raster
full.df <- full.df %>% rename(z = lam.full)
full.raster <- rasterFromXYZ(full.df)
plot(full.raster)
M=rpois(1, lam.max)
x.superpop <- runif(M, x.domain[1], x.domain[2])
y.superpop <- runif(M, y.domain[1], y.domain[2])
s.superpop <- cbind(x.superpop, y.superpop)
X.superpop <- cbind(x.superpop, y.superpop)
lam.superpop=exp(beta.0+X.superpop%*%beta)
obs.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.obs=s.superpop[obs.idx,] # total observed points
X.obs=X.superpop[obs.idx,]
lam.obs <- lam.superpop[obs.idx]
N=nrow(s.obs)
superpop.df <- as.data.frame(cbind(x.superpop, y.superpop, lam.superpop))
ggplot(data = superpop.df, aes(x = x.superpop, y = y.superpop, col = lam.superpop)) +
geom_point(size = 0.5)
obs.win <- ((s.obs[,1] < 0.5) & (s.obs[,2] > 0.5)) |
((s.obs[,1] > 0.5) & (s.obs[,2] < 0.5))
obs.win.idx <- (1:N)[obs.win]
full.win <- ((s.full[,1] < 0.5) & (s.full[,2] > 0.5)) |
((s.full[,1] > 0.5) & (s.full[,2] < 0.5))
full.win.idx <- (1:m)[full.win]
n=length(obs.win.idx)
s.win=s.obs[obs.win.idx,]
X.win=X.obs[obs.win.idx,]
X.win.full=X.full[full.win.idx,]
X.nowin.full=X.full[-full.win.idx,]
obs.df <- as.data.frame(s.obs)
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop,
col = factor(obs.win))) +
geom_point()
layout(matrix(1:2,2,1))
plot(out.comp.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.comp.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
layout(matrix(1:2,2,1))
plot(out.cond.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
layout(matrix(1:2,2,1))
plot(out.cond.2.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.2.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
layout(matrix(1:3,1,3))
hist(out.comp.full$beta.0.save,prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(out.cond.full$beta.0.save,n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.0.save,n=1000),col=3,lwd=2)
hist(out.comp.full$beta.save[1,],prob=TRUE,breaks=60,main="",xlab=bquote(beta[1]),
ylim = c(0,1))
lines(density(out.cond.full$beta.save[1,],n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.save[1,],n=1000),col=3,lwd=2)
hist(out.comp.full$beta.save[2,],prob=TRUE,breaks=60,main="",xlab=bquote(beta[2]),
ylim = c(0,1))
lines(density(out.cond.full$beta.save[2,],n=1000),col=2,lwd=2)
lines(density(out.cond.2.full$beta.save[2,],n=1000),col=3,lwd=2)
plot(N.save,type="l")
abline(h=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
hist(N.save,breaks=50,prob=TRUE,main="",xlab="N")
abline(v=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
par(mfrow = c(1,1))
abline(h=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
plot(N.save,type="l")
abline(h=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
hist(N.save,breaks=50,prob=TRUE,main="",xlab="N")
abline(v=N,col=rgb(0,1,0,.8),lty=2,lwd=2)
