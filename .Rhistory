tot.win.area <- area.owin(combined.window)
n.win <- 16
win.area <- tot.win.area/n.win
tot.nonwin.area <- tot.area - tot.win.area
# plot the window
domain <- owin(xrange = c(0,domain.length), yrange = c(0,domain.length))
# get quadrature grid
x.m <- 100
y.m <- 100
m <- x.m*y.m
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
y.full <- x.full
s.full <- expand.grid(x = x.full, y = y.full)
ds <- (x.full[2] - x.full[1])^2
# set X matrix
X.full <- matrix(0,m,2)
x1 <- s.full[,1]
x2 <- s.full[,2]
X.full[,1] <- x1
X.full[,2] <- x2
# set beta
beta <- c(2,1)
beta.0 <- 4
lam.full <- exp(beta.0+X.full%*%beta)
lam.max <- max(lam.full)
full.df <- as.data.frame(cbind(s.full, x1, x2, lam.full))
# create full raster
full.df <- full.df %>% rename(z = lam.full)
# simulate observed points
M=rpois(1, lam.max)
x.superpop <- runif(M, x.domain[1], x.domain[2])
y.superpop <- runif(M, y.domain[1], y.domain[2])
s.superpop <- cbind(x.superpop, y.superpop)
X.superpop <- cbind(x.superpop, y.superpop)
lam.superpop=exp(beta.0+X.superpop%*%beta)
obs.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.obs=s.superpop[obs.idx,] # total observed points
X.obs=X.superpop[obs.idx,]
lam.obs <- lam.superpop[obs.idx]
N=nrow(s.obs) # 218
# plot superpop lambda
superpop.df <- as.data.frame(cbind(x.superpop, y.superpop, lam.superpop))
obs.win <- inside.owin(s.obs[,1], s.obs[,2], combined.window)
obs.win.idx <- (1:N)[obs.win]
n=length(obs.win.idx) # 44
full.win <- inside.owin(s.full[,1], s.full[,2], combined.window)
full.win.idx <- (1:m)[full.win]
s.win=s.obs[obs.win.idx,]
X.win=X.obs[obs.win.idx,]
X.win.full=X.full[full.win.idx,]
X.nowin.full=X.full[-full.win.idx,]
# plot windowed data
obs.df <- as.data.frame(s.obs)
n.mcmc=100000
source("spp.comp.mcmc.R")
tic()
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
toc() # 6.568 sec
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
out.cond.full <- spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
out.cond.full
p <- ncol(X.pg)
beta.save <- beta.save.pg$beta[2:3,]
load("~/Desktop/GlacierBay_Project/GlacierBay_Code/spp_win_2D/SPP_script.RData")
library(tidyverse)
library(raster)
library(spatstat)
# --- Simulate 2D data ---------------------------------------------------------
set.seed(1234)
# set domain
x.domain <- c(0,0.9)
y.domain <- c(0,0.9)
# define the coordinates for window squares
win.length <- 0.1
gap <- 0.1
domain.length <- x.domain[2] - x.domain[1]
coords <- expand.grid(x = seq(gap, domain.length - win.length - gap, by = win.length + gap),
y = seq(gap, domain.length - win.length - gap, by = win.length + gap))
# create individual squares
squares <- lapply(1:nrow(coords), function(i) {
x0 <- coords$x[i]
y0 <- coords$y[i]
owin(xrange = c(x0, x0 + win.length), yrange = c(y0, y0 + win.length))
})
# combine squares into single window
combined.window <- do.call(union.owin, squares)
# calculate areas
tot.area <- (x.domain[2] - x.domain[1])*(y.domain[2] - y.domain[1])
tot.win.area <- area.owin(combined.window)
n.win <- 16
win.area <- tot.win.area/n.win
tot.nonwin.area <- tot.area - tot.win.area
# plot the window
domain <- owin(xrange = c(0,domain.length), yrange = c(0,domain.length))
# get quadrature grid
x.m <- 100
y.m <- 100
m <- x.m*y.m
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
y.full <- x.full
s.full <- expand.grid(x = x.full, y = y.full)
ds <- (x.full[2] - x.full[1])^2
# set X matrix
X.full <- matrix(0,m,2)
x1 <- s.full[,1]
x2 <- s.full[,2]
X.full[,1] <- x1
X.full[,2] <- x2
# set beta
beta <- c(2,1)
beta.0 <- 4
lam.full <- exp(beta.0+X.full%*%beta)
lam.max <- max(lam.full)
M=rpois(1, lam.max)
x.superpop <- runif(M, x.domain[1], x.domain[2])
y.superpop <- runif(M, y.domain[1], y.domain[2])
s.superpop <- cbind(x.superpop, y.superpop)
X.superpop <- cbind(x.superpop, y.superpop)
lam.superpop=exp(beta.0+X.superpop%*%beta)
obs.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.obs=s.superpop[obs.idx,] # total observed points
X.obs=X.superpop[obs.idx,]
lam.obs <- lam.superpop[obs.idx]
N=nrow(s.obs) # 218
# plot superpop lambda
obs.win <- inside.owin(s.obs[,1], s.obs[,2], combined.window)
obs.win.idx <- (1:N)[obs.win]
n=length(obs.win.idx) # 44
full.win <- inside.owin(s.full[,1], s.full[,2], combined.window)
full.win.idx <- (1:m)[full.win]
s.win=s.obs[obs.win.idx,]
X.win=X.obs[obs.win.idx,]
X.win.full=X.full[full.win.idx,]
X.nowin.full=X.full[-full.win.idx,]
n.mcmc=100000
source("spp.comp.mcmc.R")
tic()
library(tictoc)
n.mcmc=100000
source("spp.comp.mcmc.R")
tic()
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
toc() # 6.568 sec
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full <- spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
# sample background points
n.bg <- 10000
bg.pts <- rpoint(n.bg, win = combined.window)
# prepare X matrix
X.bg <- cbind(bg.pts$x, bg.pts$y)
X.bern <- rbind(X.win, X.bg)
y.bern <- rep(0, n + n.bg)
y.bern[1:n] <- 1
source(here("GlacierBay_Code", "Polya_Gamma.R"))
library(here)
source(here("GlacierBay_Code", "Polya_Gamma.R"))
source(here("Polya_Gamma.R"))
X.pg <- cbind(rep(1, nrow(X.bern)), X.bern)
p <- ncol(X.pg)
mu.beta <- rep(0, p)
sigma.beta <- diag(2.25, p)
tic()
beta.save.pg <- polya_gamma(y.bern, X.pg, mu.beta, sigma.beta, 100000)
source(here("Polya_Gamma.R"))
X.pg <- cbind(rep(1, nrow(X.bern)), X.bern)
p <- ncol(X.pg)
mu.beta <- rep(0, p)
sigma.beta <- diag(2.25, p)
tic()
beta.save.pg <- polya_gamma(y.bern, X.pg, mu.beta, sigma.beta, 100000)
toc() # 236 sec
out.cond.pg <- list(beta.save = beta.save.pg$beta[-1,], beta.0.save = rnorm(n.mcmc, 0, 10),
n.mcmc = 100000, n = n, ds = ds, X.full = X.win.full)
source(here("spp_win_2D", "spp.stg2.mcmc.R"))
# using num quad results
tic()
out.cond.pg2 = spp.stg2.mcmc(out.cond.pg)
toc()
# discard burn-in
beta.save <- out.cond.pg2$beta.save[,-(1:n.burn)]
beta.0.save <- out.cond.pg2$beta.0.save[-(1:n.burn)]
# trace plots
layout(matrix(1:2,2,1))
plot(beta.0.save,type="l")
# discard burn-in
beta.save <- out.cond.pg2$beta.save[,-(1:n.burn)]
beta.0.save <- out.cond.pg2$beta.0.save[-(1:n.burn)]
# trace plots
layout(matrix(1:2,2,1))
plot(beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
beta.save <- beta.save.pg$beta[2:3,]
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.win.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, rate = 0.01 + lam.int)
};cat("\n")
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 3),col="red",lwd=2)
lines(density(out.cond.pg2$beta.0.save[,-(1:1000)],n=1000, adjust = 3),
col="green",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 3),col="red",lwd=2)
lines(density(out.cond.pg2$beta.0.save[-(1:1000)],n=1000, adjust = 3),
col="green",lwd=2)
par(mfrow = c(1,1))
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 1),col="red",lwd=2)
lines(density(out.cond.pg2$beta.0.save[-(1:1000)],n=1000, adjust = 1),
col="green",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 2),col="red",lwd=2)
lines(density(out.cond.pg2$beta.0.save[-(1:1000)],n=1000, adjust = 2),
col="green",lwd=2)
plot(beta.0.save, type ="l")
plot(out.cond.pg2$beta.0.save[-(1:1000)], type = "l")
?vline
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 3),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000, adjust = 3),
col="green",lwd=2)
abline(v = 4, lty = 2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 2),col="red",lwd=2)
lines(density(out.cond.pg2$beta.0.save[-(1:1000)],n=1000, adjust = 2),
col="green",lwd=2)
abline(v = 4, lty = 2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 2),col="red",lwd=2)
lines(density(out.cond.pg2$beta.0.save[-(1:1000)],n=1000, adjust = 2),
col="green",lwd=2)
abline(v = 4, lty = 2, lwd = 2)
beta.0.save <- log(theta.save)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 2),col="red",lwd=2)
lines(density(out.cond.pg2$beta.0.save[-(1:1000)],n=1000, adjust = 2),
col="green",lwd=2)
abline(v = 4, lty = 2, lwd = 2)
plot(beta.0.save, type ="l")
save.image("~/Desktop/GlacierBay_Project/GlacierBay_Code/spp_win_2D/script.RData")
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 2),col="red",lwd=2)
lines(density(out.cond.pg2$beta.0.save[-(1:1000)],n=1000, adjust = 2),
col="green",lwd=2)
abline(v = 4, lty = 2, lwd = 2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 2),col="red",lwd=2)
lines(density(out.cond.pg2$beta.0.save[-(1:1000)],n=1000, adjust = 2),
col="green",lwd=2)
load("~/Desktop/GlacierBay_Project/GlacierBay_Code/spp_win_2D/script.RData")
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 2),col="red",lwd=2)
lines(density(out.cond.pg2$beta.0.save[-(1:1000)],n=1000, adjust = 2),
col="green",lwd=2)
# discard burn-in
n.burn <- 0.1*n.mcmc
beta.0.save <- out.comp.full$beta.0.save[-(1:n.burn)]
beta.save <- out.comp.full$beta.save[,-(1:n.burn)]
# trace plot
layout(matrix(1:2,2,1))
plot(beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
load("~/Desktop/GlacierBay_Project/GlacierBay_Code/SPP_script.RData")
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 3),col="red",lwd=2)
lines(density(out.cond.2.full$beta.0.save[-(1:1000)],n=1000, adjust = 3),
col="green",lwd=2)
par(mfrow = c(1,1))
beta.save <- out.cond.pg$beta.save
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.win.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, 0.01 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
n.mcmc <- 100000
beta.save <- out.cond.pg$beta.save
theta.save <- rep(0,n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int <- sum(exp(log(ds)+X.win.full%*%beta.save[,k]))
theta.save[k] <- rgamma(1, 0.01 + n, 0.01 + lam.int)
};cat("\n")
beta.0.save <- log(theta.save)
plot(beta.0.save, type ="l")
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 3),col="red",lwd=2)
lines(density(out.cond.2.full.pg[-(1:1000)],n=1000, adjust = 3),
col="green",lwd=2)
hist(out.comp.full$beta.0.save[-(1:1000)],prob=TRUE,breaks=60,main="",xlab=bquote(beta[0]),
ylim = c(0,1))
lines(density(beta.0.save[-(1:1000)],n=1000, adjust = 3),col="red",lwd=2)
lines(density(out.cond.2.full.pg$beta.0.save[-(1:1000)],n=1000, adjust = 3),
col="green",lwd=2)
n.mcmc
beta.0.save.gibbs <- beta.0.save
beta.save <- out.cond.pg$beta.save
# theta.save <- rep(0,n.mcmc)
lam.int.save <- rep(0, n.mcmc)
for(k in 1:n.mcmc){
if(k%%1000==0){cat(k," ")}
lam.int.save[k] <- sum(exp(log(ds)+X.win.full%*%beta.save[,k]))
# theta.save[k] <- rgamma(1, 0.01 + n, 0.01 + lam.int)
};cat("\n")
# prepare for third stage
out.cond.pg <- list(beta.save = beta.save.pg$beta[-1,],
# beta.0.save = log(rgamma(n.mcmc, n + 0.001, 1.001)),
n.mcmc = n.mcmc, n = n, ds = ds, X.full = X.win.full,
lam.int.save = lam.int.save)
# --- 3rd stage MCMC -----------------------------------------------------------
source(here("GlacierBay_Code", "spp.stg3.mcmc.R"))
setwd("~/Desktop/GlacierBay_Project/GlacierBay_Code")
source(here("spp.stg3.mcmc.R"))
tic()
out.cond.pg3 <- spp.stg3.mcmc(out.cond.pg)
toc()
# discard burn-in
beta.save <- out.cond.pg3$beta.save[,-(1:n.burn)]
beta.0.save <- out.cond.pg3$beta.0.save[-(1:n.burn)]
# trace plots
layout(matrix(1:2,2,1))
plot(beta.0.save,type="l")
matplot(t(beta.save),lty=1,type="l")
# discard burn-in
beta.save <- out.cond.2.full.pg$beta.save[,-(1:n.burn)]
beta.0.save <- out.cond.2.full.pg$beta.0.save[-(1:n.burn)]
# trace plots
layout(matrix(1:2,2,1))
plot(beta.0.save,type="l")
matplot(t(beta.save),lty=1,type="l")
# discard burn-in
n.burn <- 0.1*n.mcmc
beta.save.full.lik <- out.comp.full$beta.save[,-(1:n.burn)]
beta.0.save.full.lik <- out.comp.full$beta.0.save[-(1:n.burn)]
# trace plots
layout(matrix(1:2,2,1))
plot(beta.0.save.full.lik,type="l")
matplot(t(beta.save.full.lik),lty=1,type="l", col = c("black", "red"))
?crossprod
library(tidyverse)
library(raster)
library(spatstat)
library(tictoc)
library(here)
# --- Simulate 2D data ---------------------------------------------------------
set.seed(1234)
# set domain
x.domain <- c(0,0.9)
y.domain <- c(0,0.9)
# define the coordinates for window squares
win.length <- 0.1
gap <- 0.1
domain.length <- x.domain[2] - x.domain[1]
coords <- expand.grid(x = seq(gap, domain.length - win.length - gap, by = win.length + gap),
y = seq(gap, domain.length - win.length - gap, by = win.length + gap))
# create individual squares
squares <- lapply(1:nrow(coords), function(i) {
x0 <- coords$x[i]
y0 <- coords$y[i]
owin(xrange = c(x0, x0 + win.length), yrange = c(y0, y0 + win.length))
})
# combine squares into single window
combined.window <- do.call(union.owin, squares)
# calculate areas
tot.area <- (x.domain[2] - x.domain[1])*(y.domain[2] - y.domain[1])
tot.win.area <- area.owin(combined.window)
n.win <- 16
win.area <- tot.win.area/n.win
tot.nonwin.area <- tot.area - tot.win.area
# plot the window
domain <- owin(xrange = c(0,domain.length), yrange = c(0,domain.length))
# get quadrature grid
x.m <- 100
y.m <- 100
m <- x.m*y.m
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
y.full <- x.full
s.full <- expand.grid(x = x.full, y = y.full)
ds <- (x.full[2] - x.full[1])^2
# set X matrix
X.full <- matrix(0,m,2)
x1 <- s.full[,1]
x2 <- s.full[,2]
X.full[,1] <- x1
X.full[,2] <- x2
# set beta
beta <- c(2,1)
beta.0 <- 4
lam.full <- exp(beta.0+X.full%*%beta)
lam.max <- max(lam.full)
M=rpois(1, lam.max)
x.superpop <- runif(M, x.domain[1], x.domain[2])
y.superpop <- runif(M, y.domain[1], y.domain[2])
s.superpop <- cbind(x.superpop, y.superpop)
X.superpop <- cbind(x.superpop, y.superpop)
lam.superpop=exp(beta.0+X.superpop%*%beta)
obs.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.obs=s.superpop[obs.idx,] # total observed points
X.obs=X.superpop[obs.idx,]
lam.obs <- lam.superpop[obs.idx]
N=nrow(s.obs) # 218
obs.win <- inside.owin(s.obs[,1], s.obs[,2], combined.window)
obs.win.idx <- (1:N)[obs.win]
n=length(obs.win.idx) # 44
full.win <- inside.owin(s.full[,1], s.full[,2], combined.window)
full.win.idx <- (1:m)[full.win]
s.win=s.obs[obs.win.idx,]
X.win=X.obs[obs.win.idx,]
X.win.full=X.full[full.win.idx,]
X.nowin.full=X.full[-full.win.idx,]
# plot windowed data
obs.df <- as.data.frame(s.obs)
n.bg <- 10000
bg.pts <- rpoint(n.bg, win = combined.window)
# prepare X matrix
X.bg <- cbind(bg.pts$x, bg.pts$y)
X.bern <- rbind(X.win, X.bg)
y.bern <- rep(0, n + n.bg)
y.bern[1:n] <- 1
source(here("Polya_Gamma.R"))
X.pg <- cbind(rep(1, nrow(X.bern)), X.bern)
p <- ncol(X.pg)
mu.beta <- rep(0, p)
sigma.beta <- diag(2.25, p)
tic()
beta.save.pg <- polya_gamma(y.bern, X.pg, mu.beta, sigma.beta, 100000)
toc() # 236 sec
plot(beta.save.pg$beta[1,], type = "l")
abline(h=2,col=rgb(0,1,0,.8),lty=2)
effectiveSize(beta.save.pg$beta[2,]) # 2111
plot(beta.save.pg$beta[2,], type = "l")
abline(h=1,col=rgb(0,1,0,.8),lty=2)
plot(beta.save.pg$beta[2,], type = "l")
abline(h=2,col=rgb(0,1,0,.8),lty=2)
effectiveSize(beta.save.pg$beta[2,]) # 2111
plot(beta.save.pg$beta[3,], type = "l")
abline(h=1,col=rgb(0,1,0,.8),lty=2)
library(profvis)
profvis({
polya_gamma <- function(y, X,
mu_beta, Sigma_beta,
n_mcmc){
###
### Packages
###
# library(BayesLogit)
# library(Boom)
library(pgdraw)
###
### Loop Variables
###
Sigma_beta_inv=solve(Sigma_beta)
Sigma_beta_inv_times_mu=Sigma_beta_inv%*%mu_beta
###
### Starting Values
###
### Cool Start
beta=mu_beta
###
### Storage
###
beta_save=matrix(NA, ncol(X), n_mcmc)
###
### MCMC loop
###
kappa=y-1/2
n <- nrow(X)
for(q in 1:n_mcmc){
### Sample omega
omega=pgdraw(rep(1, n), X%*%beta)
### Sample beta
omega_X <- sweep(X, 1, omega, "*")
V_omega=solve(crossprod(X, omega_X))
# use double back solve
m_omega=V_omega%*%(crossprod(X, kappa)+Sigma_beta_inv_times_mu)
beta=t(mvnfast::rmvn(1, m_omega, V_omega))
### Save Samples
beta_save[,q]=beta
###
### Timer
###
if (q %% 1000 == 0) {cat(q, " ")}
}
list(beta=beta_save)
}
polya_gamma(y.bern, X.pg, mu.beta, sigma.beta, 100)
})
