sum(lam.superpop/lam.max)
lam.superpop/lam.max
sum(lam.superpop/lam.max > 1)
sum(lam.superpop/lam.max < 0)
mean(lam.superpop/lam.max)
layout(matrix(1:3,3,1))
plot(function(x){exp(beta.0+beta[1]*x+beta[2]*sin(20*x))},xlab="location",ylab=bquote(lambda),from=S.domain[1],to=S.domain[2],n=1000)
layout(matrix(1:3,3,1))
###
###  Simulate 1-D SPP
###
S.domain=c(0,1)
n.win=3
tot.area=S.domain[2]-S.domain[1]
tot.win.area=.5*tot.area
win.area=tot.win.area/n.win
tot.nonwin.area=tot.area-tot.win.area
nonwin.area=tot.nonwin.area/(n.win+1)
S.subdomain.mat=matrix(cumsum(rep(c(nonwin.area,win.area),n.win)),,2,byrow=TRUE)
m=10000 # number of quadrature points
s.full=seq(S.domain[1],S.domain[2],,m)
X.full=matrix(0,m,2)
X.full[,1]=s.full
X.full[,2]=sin(20*s.full)
ds=X.full[2,1]-X.full[1,1]
beta=c(2,1)
beta.0=4
lam.full=exp(beta.0+X.full%*%beta)
lam.max=max(lam.full)
M=rpois(1,lam.max)
s.superpop=runif(M,S.domain[1],S.domain[2]) # potential starting points
X.superpop=cbind(s.superpop,sin(20*s.superpop))
lam.superpop=exp(beta.0+X.superpop%*%beta)
tot.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.tot=s.superpop[tot.idx] # total observed points
X.tot=X.superpop[tot.idx,]
N=length(s.tot)
###
###  Get windowed data
###
win.idx=NULL
win.full.idx=NULL
for(j in 1:n.win){
tmp.win.idx=(1:N)[(s.tot>S.subdomain.mat[j,1])&(s.tot<S.subdomain.mat[j,2])]
win.idx=c(win.idx,tmp.win.idx)
tmp.full.idx=(1:m)[(s.full>S.subdomain.mat[j,1])&(s.full<S.subdomain.mat[j,2])]
win.full.idx=c(win.full.idx,tmp.full.idx)
}
n=length(win.idx)
s.win=s.tot[win.idx]
X.win=X.tot[win.idx,]
X.win.full=X.full[win.full.idx,]
X.nowin.full=X.full[-win.full.idx,]
win.area=sum(S.subdomain.mat[,2]-S.subdomain.mat[,1])
###
###  Make Simulation Plots
###
layout(matrix(1:3,3,1))
dev.off()
###
###  Simulate 1-D SPP
###
S.domain=c(0,1)
n.win=3
tot.area=S.domain[2]-S.domain[1]
tot.win.area=.5*tot.area
win.area=tot.win.area/n.win
tot.nonwin.area=tot.area-tot.win.area
nonwin.area=tot.nonwin.area/(n.win+1)
S.subdomain.mat=matrix(cumsum(rep(c(nonwin.area,win.area),n.win)),,2,byrow=TRUE)
m=10000 # number of quadrature points
s.full=seq(S.domain[1],S.domain[2],,m)
X.full=matrix(0,m,2)
X.full[,1]=s.full
X.full[,2]=sin(20*s.full)
ds=X.full[2,1]-X.full[1,1]
beta=c(2,1)
beta.0=4
lam.full=exp(beta.0+X.full%*%beta)
lam.max=max(lam.full)
M=rpois(1,lam.max)
s.superpop=runif(M,S.domain[1],S.domain[2]) # potential starting points
X.superpop=cbind(s.superpop,sin(20*s.superpop))
lam.superpop=exp(beta.0+X.superpop%*%beta)
tot.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.tot=s.superpop[tot.idx] # total observed points
X.tot=X.superpop[tot.idx,]
N=length(s.tot)
###
###  Get windowed data
###
win.idx=NULL
win.full.idx=NULL
for(j in 1:n.win){
tmp.win.idx=(1:N)[(s.tot>S.subdomain.mat[j,1])&(s.tot<S.subdomain.mat[j,2])]
win.idx=c(win.idx,tmp.win.idx)
tmp.full.idx=(1:m)[(s.full>S.subdomain.mat[j,1])&(s.full<S.subdomain.mat[j,2])]
win.full.idx=c(win.full.idx,tmp.full.idx)
}
n=length(win.idx)
s.win=s.tot[win.idx]
X.win=X.tot[win.idx,]
X.win.full=X.full[win.full.idx,]
X.nowin.full=X.full[-win.full.idx,]
win.area=sum(S.subdomain.mat[,2]-S.subdomain.mat[,1])
###
###  Make Simulation Plots
###
layout(matrix(1:3,3,1))
plot(function(x){exp(beta.0+beta[1]*x+beta[2]*sin(20*x))},xlab="location",ylab=bquote(lambda),from=S.domain[1],to=S.domain[2],n=1000)
###
###  Simulate 1-D SPP
###
S.domain=c(0,1)
n.win=3
tot.area=S.domain[2]-S.domain[1]
tot.win.area=.5*tot.area
win.area=tot.win.area/n.win
tot.nonwin.area=tot.area-tot.win.area
nonwin.area=tot.nonwin.area/(n.win+1)
S.subdomain.mat=matrix(cumsum(rep(c(nonwin.area,win.area),n.win)),,2,byrow=TRUE)
m=10000 # number of quadrature points
s.full=seq(S.domain[1],S.domain[2],,m)
X.full=matrix(0,m,2)
X.full[,1]=s.full
X.full[,2]=sin(20*s.full)
ds=X.full[2,1]-X.full[1,1]
beta=c(2,1)
beta.0=4
lam.full=exp(beta.0+X.full%*%beta)
lam.max=max(lam.full)
M=rpois(1,lam.max)
s.superpop=runif(M,S.domain[1],S.domain[2]) # potential starting points
X.superpop=cbind(s.superpop,sin(20*s.superpop))
lam.superpop=exp(beta.0+X.superpop%*%beta)
tot.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.tot=s.superpop[tot.idx] # total observed points
X.tot=X.superpop[tot.idx,]
N=length(s.tot)
###
###  Get windowed data
###
win.idx=NULL
win.full.idx=NULL
for(j in 1:n.win){
tmp.win.idx=(1:N)[(s.tot>S.subdomain.mat[j,1])&(s.tot<S.subdomain.mat[j,2])]
win.idx=c(win.idx,tmp.win.idx)
tmp.full.idx=(1:m)[(s.full>S.subdomain.mat[j,1])&(s.full<S.subdomain.mat[j,2])]
win.full.idx=c(win.full.idx,tmp.full.idx)
}
n=length(win.idx)
s.win=s.tot[win.idx]
X.win=X.tot[win.idx,]
X.win.full=X.full[win.full.idx,]
X.nowin.full=X.full[-win.full.idx,]
win.area=sum(S.subdomain.mat[,2]-S.subdomain.mat[,1])
###
###  Make Simulation Plots
###
layout(matrix(1:3,3,1))
plot(function(x){exp(beta.0+beta[1]*x+beta[2]*sin(20*x))},xlab="location",ylab=bquote(lambda),from=S.domain[1],to=S.domain[2],n=1000)
###
###  Simulate 1-D SPP
###
S.domain=c(0,1)
n.win=3
tot.area=S.domain[2]-S.domain[1]
tot.win.area=.5*tot.area
win.area=tot.win.area/n.win
tot.nonwin.area=tot.area-tot.win.area
nonwin.area=tot.nonwin.area/(n.win+1)
S.subdomain.mat=matrix(cumsum(rep(c(nonwin.area,win.area),n.win)),,2,byrow=TRUE)
m=10000 # number of quadrature points
s.full=seq(S.domain[1],S.domain[2],,m)
X.full=matrix(0,m,2)
X.full[,1]=s.full
X.full[,2]=sin(20*s.full)
ds=X.full[2,1]-X.full[1,1]
beta=c(2,1)
beta.0=4
lam.full=exp(beta.0+X.full%*%beta)
lam.max=max(lam.full)
M=rpois(1,lam.max)
s.superpop=runif(M,S.domain[1],S.domain[2]) # potential starting points
X.superpop=cbind(s.superpop,sin(20*s.superpop))
lam.superpop=exp(beta.0+X.superpop%*%beta)
tot.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.tot=s.superpop[tot.idx] # total observed points
X.tot=X.superpop[tot.idx,]
N=length(s.tot)
###
###  Get windowed data
###
win.idx=NULL
win.full.idx=NULL
for(j in 1:n.win){
tmp.win.idx=(1:N)[(s.tot>S.subdomain.mat[j,1])&(s.tot<S.subdomain.mat[j,2])]
win.idx=c(win.idx,tmp.win.idx)
tmp.full.idx=(1:m)[(s.full>S.subdomain.mat[j,1])&(s.full<S.subdomain.mat[j,2])]
win.full.idx=c(win.full.idx,tmp.full.idx)
}
n=length(win.idx)
s.win=s.tot[win.idx]
X.win=X.tot[win.idx,]
X.win.full=X.full[win.full.idx,]
X.nowin.full=X.full[-win.full.idx,]
win.area=sum(S.subdomain.mat[,2]-S.subdomain.mat[,1])
###
###  Make Simulation Plots
###
layout(matrix(1:3,3,1))
plot(function(x){exp(beta.0+beta[1]*x+beta[2]*sin(20*x))},xlab="location",ylab=bquote(lambda),from=S.domain[1],to=S.domain[2],n=1000)
apply(S.subdomain.mat,1,function(x){rect(x[1],par("usr")[3],x[2],par("usr")[4],col=rgb(0,0,0,.05),border=NA)})
rug(s.superpop,.05,col=rgb(0,0,0,.2));rug(s.tot,.05,lwd=1.5,col=rgb(1,0,0,.5));rug(s.win,.05,lwd=1.5,col=3)
plot(function(x){x},xlab="location",ylab=bquote(x[1]),from=S.domain[1],to=S.domain[2],n=1000)
apply(S.subdomain.mat,1,function(x){rect(x[1],par("usr")[3],x[2],par("usr")[4],col=rgb(0,0,0,.05),border=NA)})
rug(s.tot,.05,lwd=1.5,col=rgb(1,0,0,.5));rug(s.win,.05,lwd=1.5,col=3)
plot(function(x){sin(20*x)},xlab="location",ylab=bquote(x[2]),from=S.domain[1],to=S.domain[2],n=1000)
apply(S.subdomain.mat,1,function(x){rect(x[1],par("usr")[3],x[2],par("usr")[4],col=rgb(0,0,0,.05),border=NA)})
rug(s.tot,.05,lwd=1.5,col=rgb(1,0,0,.5));rug(s.win,.05,lwd=1.5,col=3)
S.subdomain.mat
x.domain <- c(0,1)
y.domain <- c(0,1)
n.win <- 2
tot.area <- (x.domain[2] - x.domain[1])*(y.domain[2] - y.domain[1])
n.win <- 2
tot.area <- (x.domain[2] - x.domain[1])*(y.domain[2] - y.domain[1])
tot.win.area <- .5*tot.area
win.area <- tot.win.area/n.win
tot.nonwin.area <- tot.area - tot.win.area
nonwin.area <- tot.nonwin.area/n.win
?grid
?seq
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
x.m <- 100
y.m <- 100
m <- x.m*y.m
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
y.full <- x.full
s.full <- expand.grid(x = x.full, y = y.full)
View(s.full)
plot(x = s.full[1], y = s.full[2])
plot(x = s.full[,1], y = s.full[,2])
plot(x = s.full[,1], y = s.full[,2])
par(mfrow = c(1,1))
plot(x = s.full[,1], y = s.full[,2])
x.full <- seq(x.domain[1], x.domain[2], length.out = x.m)
y.full <- x.full
s.full <- expand.grid(x = x.full, y = y.full)
x.full[,1] <- s.full[,1] + s.full[,2]
X.full=matrix(0,m,2)
X.full[,1] <- s.full[,1] + s.full[,2]
X.full[,2] <- s.full[,1] - s.full[,2]
View(X.full)
beta=c(2,1)
beta.0=4
lam.full=exp(beta.0+X.full%*%beta)
lam.max=max(lam.full)
?plot
plot(x = x.full, y = y.full, col = X.full[,1])
plot(x = s.full[,1], y = s.full[,1], col = X.full[,1])
plot(x = s.full[,1], y = s.full[,2], col = X.full[,1])
plot(x = s.full[,1], y = s.full[,2])
library(tidyverse)
s.full.df <- as.data.frame(s.full)
View(s.full.df)
ggplot(data = s.full.df, aes(x = x, y = y)) +
geom_pont()
ggplot(data = s.full.df, aes(x = x, y = y)) +
geom_pont()
ggplot(data = s.full.df, aes(x = x, y = y)) +
geom_point()
ggplot(data = s.full.df, aes(x = x, y = y)) +
geom_point(size = 0.5)
ggplot(data = s.full.df, aes(x = x, y = y)) +
geom_point(size = 0.1)
x1 <- s.full[,1] + s.full[,2]
s.full.df <- as.data.frame(cbind(s.full, x1))
ggplot(data = s.full.df, aes(x = x, y = y)) +
geom_point(size = 0.1, col = x1)
View(s.full.df)
min(x1)
ggplot(data = s.full.df, aes(x = x, y = y)) +
geom_point(size = 0.1, col = x1[-1])
ggplot(data = s.full.df, aes(x = x, y = y)) +
geom_point(size = 0.1, fill = x1)
ggplot(data = s.full.df, aes(x = x, y = y, fill = x1)) +
geom_point(size = 0.1)
ggplot(data = s.full.df, aes(x = x, y = y, fill = x1)) +
geom_point(size = 0.5)
View(s.full)
ggplot(data = s.full.df, aes(x = x, y = y, col = x1)) +
geom_point(size = 0.5)
x2 <- s.full[,1]
s.full.df <- as.data.frame(cbind(s.full, x1, x2))
ggplot(data = s.full.df, aes(x = x, y = y, col = x2)) +
geom_point(size = 0.5)
X.full=matrix(0,m,2)
x1 <- s.full[,1]
x2 <- s.full[,2]
ggplot(data = s.full.df, aes(x = x, y = y, col = x1)) +
geom_point(size = 0.5)
ggplot(data = s.full.df, aes(x = x, y = y, col = x2)) +
geom_point(size = 0.5)
ggplot(data = s.full.df, aes(x = x, y = y, col = x1)) +
geom_point(size = 0.5)
s.full.df <- as.data.frame(cbind(s.full, x1, x2))
ggplot(data = s.full.df, aes(x = x, y = y, col = x1)) +
geom_point(size = 0.5)
ggplot(data = s.full.df, aes(x = x, y = y, col = x2)) +
geom_point(size = 0.5)
X.full=matrix(0,m,2)
x1 <- s.full[,1]
x2 <- s.full[,2]
X.full[,1] <- x1
X.full[,2] <- x2
beta=c(2,1)
beta.0=4
lam.full=exp(beta.0+X.full%*%beta)
lam.max=max(lam.full)
ggplot(data = s.full.df, aes(x = x, y = y, col = lambda.full)) +
geom_point(size = 0.5)
View(s.full.df)
# plot covariates and lambda
s.full.df <- as.data.frame(cbind(s.full, x1, x2, lambda.full))
# plot covariates and lambda
s.full.df <- as.data.frame(cbind(s.full, x1, x2, lam.full))
ggplot(data = s.full.df, aes(x = x, y = y, col = lam.full)) +
geom_point(size = 0.5)
M=rpois(1, lam.max)
x.superpop <- runif(M, x.domain[1], x.domain[2])
y.superpop <- runif(M, y.domain[1], y.domain[2])
s.superpop <- cbind(x.superpop, y.superpop)
X.superpop <- cbind(x.superpop, y.superpop)
lam.superpop=exp(beta.0+X.superpop%*%beta)
tot.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.tot=s.superpop[tot.idx,] # total observed points
X.tot=X.superpop[tot.idx,]
N=length(s.tot)
View(s.tot)
N=nrow(s.tot)
obs.win.idx <- (1:N)[((s.obs[,1] < 0.5) & (s.obs[,2] > 0.5)) |
((s.obs[,1] > 0.5) & (s.obs[,2] < 0.5))]
obs.idx=rbinom(M,1,lam.superpop/lam.max)==1
s.obs=s.superpop[obs.idx,] # total observed points
X.obs=X.superpop[obs.idx,]
N=nrow(s.obs)
obs.win.idx <- (1:N)[((s.obs[,1] < 0.5) & (s.obs[,2] > 0.5)) |
((s.obs[,1] > 0.5) & (s.obs[,2] < 0.5))]
sum(obs.win.idx)
full.win.idx <- (1:m)[((s.full[,1] < 0.5) & (s.full[,2] > 0.5)) |
((s.full[,1] > 0.5) & (s.full[,2] < 0.5))]
n=length(obs.win.idx)
superpop.df <- as.data.frame(cbind(x.superpop, y.superpop, lam.superpop))
ggplot(data = superpop.df, aes(x = x.superpop, y = y.superpop, col = lam.superpop)) +
geom_point(size = 0.5)
View(X.full)
((s.obs[,1] < 0.5) & (s.obs[,2] > 0.5)) |
((s.obs[,1] > 0.5) & (s.obs[,2] < 0.5))
obs.win <- ((s.obs[,1] < 0.5) & (s.obs[,2] > 0.5)) |
((s.obs[,1] > 0.5) & (s.obs[,2] < 0.5))
obs.win.idx <- (1:N)[obs.win]
full.win <- ((s.full[,1] < 0.5) & (s.full[,2] > 0.5)) |
((s.full[,1] > 0.5) & (s.full[,2] < 0.5))
full.win.idx <- (1:m)[full.win]
n=length(obs.win.idx)
lam.obs <- lam.superpop[obs.idx]
# plot windowed data
obs.df <- as.data.frame(s.obs)
View(s.obs)
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop, col = obs.win))
as.integer(obs.win)
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop, col = as.integer(obs.win)))
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop, fill = as.integer(obs.win)))
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop,
fill = as.integer(obs.win))) +
geom_point()
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop,
col = as.integer(obs.win))) +
geom_point()
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop,
col = fator(obs.win))) +
geom_point()
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop,
col = factor(obs.win))) +
geom_point()
View(s.full)
x.full
ds <- (x.full[2] - X.full[1])^2
ds <- (x.full[2] - x.full[1])^2
library(raster)
rasterFromXYZ()
?rasterFromXYZ
View(s.full.df)
raster.df <- as.data.frame(cbind(s.full, lam.full), rownames = "x", "y", "z")
raster.df <- as.data.frame(cbind(s.full, lam.full))
full.df <- as.data.frame(cbind(s.full, x1, x2, lam.full))
ggplot(data = full.df, aes(x = x, y = y, col = x)) +
geom_point(size = 0.5)
ggplot(data = full.df, aes(x = x, y = y, col = y)) +
geom_point(size = 0.5)
ggplot(data = full.df, aes(x = x, y = y, col = lam.full)) +
geom_point(size = 0.5)
?colnames
# create full raster
full.df <- full.df %>% rename(z = lam.full)
full.raster <- rasterFromXYZ(full.df)
View(full.raster)
plot(full.raster)
View(full.df)
res(full.raster)
res(full.raster)[1]*res(full.raster)
res(full.raster)[1]*res(full.raster)[2]
ds
plot(full.raster)
ds <- (x.full[2] - x.full[1])^2
ds <- (x.full[2] - x.full[1])^2
s.win=s.obs[obs.win.idx,]
X.win=X.tot[obs.win.idx,]
View(s.win)
setwd("~/Desktop/GlacierBay_Project/GlacierBay_Code/spp_win_2D")
n.win <- 2
tot.area <- (x.domain[2] - x.domain[1])*(y.domain[2] - y.domain[1])
tot.win.area <- tot.area/2
win.area <- tot.win.area/n.win
tot.nonwin.area <- tot.area - tot.win.area
nonwin.area <- tot.nonwin.area/n.win
n.mcmc=100000
source("spp.comp.mcmc.R")
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
X.win.full=X.full[win.full.idx,]
X.win.full=X.full[full.win.idx,]
X.nowin.full=X.full[-full.win.idx,]
n.mcmc=100000
source("spp.comp.mcmc.R")
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
layout(matrix(1:2,2,1))
plot(out.comp.full$beta.0.save,type="l")
layout(matrix(1:2,2,1))
dev.off)
dev.off()
layout(matrix(1:2,2,1))
plot(out.comp.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.comp.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
win.area
ds
log(n)-log(area)
log(n) - log(win.area)
layout(matrix(1:2,2,1))
plot(out.comp.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.comp.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
mean(beta0.save)
mean(beta.0.save)
mean(out.comp.full$beta.0.save)
mean(out.comp.full$beta.0.save[-(1:100)])
View(s.full)
View(X.full)
n.mcmc=100000
source("spp.cond.mcmc.R")
out.cond.full=spp.cond.mcmc(s.win,X.win,X.win.full,ds,n.mcmc)
layout(matrix(1:2,2,1))
layout(matrix(1:2,2,1))
plot(out.cond.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
out.cond.full$beta.save
View(out.cond.full)
out.cond.full$beta.save[,1]
mean(out.cond.full$beta.save[1,])
layout(matrix(1:2,2,1))
plot(out.cond.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.cond.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop,
col = factor(obs.win))) +
geom_point()
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop,
col = factor(obs.win))) +
geom_point()
dev.off()
ggplot(data = obs.df, aes(x = x.superpop, y = y.superpop,
col = factor(obs.win))) +
geom_point()
layout(matrix(1:2,2,1))
plot(out.comp.full$beta.0.save,type="l")
abline(h=beta.0,col=rgb(0,1,0,.8),lty=2)
matplot(t(out.comp.full$beta.save),lty=1,type="l")
abline(h=beta,col=rgb(0,1,0,.8),lty=2)
debug(spp.comp.mcmc)
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
View(s.obs)
S.domain=c(0,1)
n.win=3
tot.area=S.domain[2]-S.domain[1]
tot.win.area=.5*tot.area
win.area=tot.win.area/n.win
tot.nonwin.area=tot.area-tot.win.area
nonwin.area=tot.nonwin.area/(n.win+1)
S.subdomain.mat=matrix(cumsum(rep(c(nonwin.area,win.area),n.win)),,2,byrow=TRUE)
m=10000 # number of quadrature points
s.full=seq(S.domain[1],S.domain[2],,m)
X.full=matrix(0,m,2)
X.full[,1]=s.full
X.full[,2]=sin(20*s.full)
ds=X.full[2,1]-X.full[1,1]
out.comp.full=spp.comp.mcmc(s.win,X.win,X.win.full,ds,win.area,n.mcmc)
